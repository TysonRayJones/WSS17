(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    256615,       4993]
NotebookOptionsPosition[    248783,       4805]
NotebookOutlinePosition[    249125,       4820]
CellTagsIndexPosition[    249082,       4817]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Neural Networks", "Title",
 CellChangeTimes->{{3.707478552882746*^9, 
  3.7074785546847353`*^9}},ExpressionUUID->"f7c3c54a-23dd-4488-ab9e-\
2b65f5e6b191"],

Cell["\<\
non-convex machine learning

\
\>", "Text",
 CellChangeTimes->{{3.7074815818273335`*^9, 
  3.707481587319935*^9}},ExpressionUUID->"54735ab1-5ecc-465d-8c49-\
a1cb7aa6bd92"],

Cell["A function combining elementary operations (layers)", "Text",
 CellChangeTimes->{{3.7074786705112877`*^9, 
  3.707478680305163*^9}},ExpressionUUID->"6fe933b3-65b2-4b94-a06c-\
1632948d75dc"],

Cell["n-tensor:  a n-dimensional list", "Text",
 CellChangeTimes->{{3.7074786874593163`*^9, 
  3.7074787195737276`*^9}},ExpressionUUID->"1b2107c4-66c6-4016-b146-\
0f51b855cf6a"],

Cell[CellGroupData[{

Cell["Layers", "Section",
 CellChangeTimes->{{3.707478731070177*^9, 
  3.7074787359371405`*^9}},ExpressionUUID->"43467e5f-d9b2-4824-b794-\
20dbcdbb4f68"],

Cell["accept tensors and output tensors", "Text",
 CellChangeTimes->{{3.7074788155193443`*^9, 
  3.7074788263111086`*^9}},ExpressionUUID->"c43d4561-d1ea-4f3f-84b9-\
9bd4e189a68d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"layer", " ", "=", " ", 
  RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}]}]], "Input",
 CellChangeTimes->{{3.707478738482708*^9, 
  3.707478750825733*^9}},ExpressionUUID->"117f09cb-3a94-4c39-8f77-\
59fd1b9b7b90"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ElementwiseLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[
               
               GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {1, 
                 0}}, {{{
                   Opacity[0.3], 
                   
                   LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}}, {{
                   AbsolutePointSize[5], 
                   PointBox[{1, 5, 2, 3, 4}]}}}], ImageSize -> 37], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Parameters", FontWeight -> Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  TemplateBox[{"\"Function\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  PaneBox[
                  "Tanh", 
                   BaseStyle -> {
                    IndentMaxFraction -> 0.1, ShowStringCharacters -> True}, 
                   ImageSize -> {250}], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
          GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[
               
               GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {1, 
                 0}}, {{{
                   Opacity[0.3], 
                   
                   LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}}, {{
                   AbsolutePointSize[5], 
                   PointBox[{1, 5, 2, 3, 4}]}}}], ImageSize -> 37], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Parameters", FontWeight -> Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  TemplateBox[{"\"Function\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  PaneBox[
                  "Tanh", 
                   BaseStyle -> {
                    IndentMaxFraction -> 0.1, ShowStringCharacters -> True}, 
                   ImageSize -> {250}], "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Ports", FontWeight -> Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline), 
                    ImageSize -> {1, 11}], CacheGraphics -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"tensor\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"tensor\"", "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ElementwiseLayer[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.707478751310598*^9},ExpressionUUID->"27487f3d-06b0-4201-83a9-\
00cf6139800b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"layer", " ", "@", " ", 
  RowBox[{"{", 
   RowBox[{"1", ",", " ", "2", ",", " ", "3", ",", " ", "4", ",", " ", "5"}], 
   "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"N", " ", "@", " ", 
  RowBox[{"Tanh", " ", "@", " ", 
   RowBox[{"{", 
    RowBox[{"1", ",", " ", "2", ",", " ", "3", ",", " ", "4", ",", " ", "5"}],
     "}"}]}]}]}], "Input",
 CellChangeTimes->{{3.7074787595081325`*^9, 3.7074787633478765`*^9}, {
  3.707478858806257*^9, 
  3.707478877353656*^9}},ExpressionUUID->"6f17b708-e444-4a49-a43a-\
c23e28d82933"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.7615941762924194`", ",", "0.9640275835990906`", ",", 
   "0.9950547814369202`", ",", "0.9993293285369873`", ",", 
   "0.9999092221260071`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.707478763649142*^9, {3.707478865330619*^9, 
   3.7074788775846634`*^9}},ExpressionUUID->"7436dffb-6a67-449e-aa69-\
a7fb820796f9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.7615941559557649`", ",", "0.9640275800758169`", ",", 
   "0.9950547536867305`", ",", "0.999329299739067`", ",", 
   "0.9999092042625951`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.707478763649142*^9, {3.707478865330619*^9, 
   3.7074788775846634`*^9}},ExpressionUUID->"fa6d5adf-de5f-41bc-8694-\
15db16e340bb"]
}, Open  ]],

Cell["Every layer must be differentiable.", "Text",
 CellChangeTimes->{{3.70747876853304*^9, 
  3.707478773387025*^9}},ExpressionUUID->"cfb22c60-9514-49cf-b298-\
abdc6f642f9c"],

Cell["\<\
Some layers have parameters (weights); this is where the learning happens\
\>", "Text",
 CellChangeTimes->{{3.7074788869110823`*^9, 
  3.70747889631619*^9}},ExpressionUUID->"1b479592-f2c5-47ca-87d0-\
ccc9509dabf7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"layer", " ", "=", " ", 
  RowBox[{"LinearLayer", "[", 
   RowBox[{"3", ",", " ", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "2"}], ",", " ", 
    RowBox[{"\"\<Biases\>\"", " ", "\[Rule]", " ", "None"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7074788985938025`*^9, 
  3.7074789137895637`*^9}},ExpressionUUID->"7f853cc0-3db6-4e42-a8cf-\
caecaa44e531"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["LinearLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[
                 
                 GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                   1, 0}}, {{{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}}, {{
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}}], BaseStyle -> 
                 GrayLevel[0.65], ImageSize -> 37], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontSize -> 8, FontColor -> RGBColor[0.66, 0, 0]]}, 
               Alignment -> {Center, Center}], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Parameters", FontWeight -> Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"OutputDimensions\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  
                  TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"3\""}, 
                   "RowWithSeparators"], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
          GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[
                 
                 GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                   1, 0}}, {{{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}}, {{
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}}], BaseStyle -> 
                 GrayLevel[0.65], ImageSize -> 37], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontSize -> 8, FontColor -> RGBColor[0.66, 0, 0]]}, 
               Alignment -> {Center, Center}], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Parameters", FontWeight -> Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"OutputDimensions\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  
                  TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"3\""}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Arrays", FontWeight -> Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline), 
                    ImageSize -> {1, 11}], CacheGraphics -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{
                    StyleBox["\"Weights\"", 
                    RGBColor[0.58, 0.25, 0.25]], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["None", "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Ports", FontWeight -> Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline), 
                    ImageSize -> {1, 11}], CacheGraphics -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("LinearLayer[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7074789144586105`*^9},ExpressionUUID->"b7f2bc14-c39d-4a9c-8c7e-\
837db5911887"]
}, Open  ]],

Cell["\<\
 Linear layer is a fully connected layer; this is just matrix multiplication! \
The elements here are \
\[OpenCurlyDoubleQuote]automatic\[CloseCurlyDoubleQuote]; to be learned!\
\>", "Text",
 CellChangeTimes->{{3.70747896361298*^9, 
  3.7074790046797533`*^9}},ExpressionUUID->"43ff60d9-1322-4766-9664-\
ecfdda567ca4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetExtract", "[", 
  RowBox[{"layer", ",", " ", "\"\<Weights\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.7074790125806*^9, 
  3.707479019099935*^9}},ExpressionUUID->"c4935375-2c52-4862-917e-\
db09ece01bf7"],

Cell[BoxData["Automatic"], "Output",
 CellChangeTimes->{
  3.7074790193691683`*^9},ExpressionUUID->"0a149d0f-fd18-4eaa-a0b9-\
619a79cdb9e0"]
}, Open  ]],

Cell["You will find actual weights from trained linear layers!", "Text",
 CellChangeTimes->{{3.707479021665676*^9, 
  3.7074790364071045`*^9}},ExpressionUUID->"4ac26a08-ba63-4b9e-967d-\
e4bd76379700"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.707478919642045*^9, 
  3.7074789650289288`*^9}},ExpressionUUID->"203cdb73-e0b5-4894-a8de-\
4bdea216f74f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Networks", "Section",
 CellChangeTimes->{{3.70747904777556*^9, 
  3.7074790485443697`*^9}},ExpressionUUID->"982ad641-8ccf-4a32-8767-\
fbba48b5d4ac"],

Cell["\<\
two containers for layres; NetChain (encodes sequential layer feeding), and \
NetGraph\
\>", "Text",
 CellChangeTimes->{{3.707479052513238*^9, 3.7074790716214733`*^9}, {
  3.707479150884058*^9, 
  3.7074791521684375`*^9}},ExpressionUUID->"8dd39be3-3ede-4e2f-b643-\
05e1d718f6f2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net1", " ", "=", " ", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}], ",", 
     "\[IndentingNewLine]", "\t", 
     RowBox[{"ElementwiseLayer", "[", "LogisticSigmoid", "]"}], ",", 
     "\[IndentingNewLine]", "\t", 
     RowBox[{"ElementwiseLayer", "[", 
      RowBox[{
       RowBox[{"#", "+", "1"}], "&"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7074790733538046`*^9, 3.7074791166229005`*^9}, {
  3.7074792618449697`*^9, 
  3.7074792629756308`*^9}},ExpressionUUID->"4adef2f1-1662-4c0c-a140-\
b0a1602101cb"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
               "$Dimensions" -> 
               NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> 
               NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
               "$Dimensions" -> 
               NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]]], "3" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], "$Dimensions" -> 
               NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[
             NeuralNetworks`ListT[
             NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
             NeuralNetworks`RealT]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`TensorT[
             NeuralNetworks`ListT[
             NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
             NeuralNetworks`RealT]]], NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", 
                   Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    RowBox[{"1", "+", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False]}], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{150., {38., 43.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{{3.707479109637329*^9, 3.7074791170231404`*^9}, 
   3.707479263429098*^9},ExpressionUUID->"75d2f7bd-8bea-4566-aba2-\
d6da72d89612"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"this", " ", "merely", " ", "performs"}], " ", "..."}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.7074791357106133`*^9, 
  3.707479143798027*^9}},ExpressionUUID->"d0f6bc4f-1530-42b0-8964-\
a9581dd7ff9d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"LogisticSigmoid", "[", 
   RowBox[{"Tanh", "[", "x", "]"}], "]"}], "+", "1"}]], "Input",
 CellChangeTimes->{{3.7074791214216094`*^9, 
  3.7074791324333973`*^9}},ExpressionUUID->"00d4b762-181e-43e7-9f27-\
774400db09f3"],

Cell["NetGraph lets you specify layer topology", "Text",
 CellChangeTimes->{{3.7074792257057405`*^9, 
  3.7074792375369577`*^9}},ExpressionUUID->"d34902a1-e284-43e6-8e81-\
aa37916dedf7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net2", " ", "=", " ", 
  RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}], ",", " ", 
      RowBox[{"ElementwiseLayer", "[", "LogisticSigmoid", "]"}], ",", " ", 
      RowBox[{"TotalLayer", "[", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input1\>\"", "]"}], " ", "\[Rule]", " ", 
       "1"}], ",", " ", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input2\>\"", "]"}], " ", "\[Rule]", " ", 
       "2"}], ",", " ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "2"}], "}"}], " ", "\[Rule]", " ", "3"}]}], 
     "}"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.707479156683625*^9, 3.70747922016713*^9}, 
   3.707479265345042*^9},ExpressionUUID->"05b54ba0-d43f-4a2b-aaed-\
2281e04f70b0"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {3, 4}, {2,
               5}, {4, 5}, {5, 6}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "Input1", "1", "Input2", "2", "3", "Output"}, {Null, 
               RGBColor[0.29, 0.29, 0.83], 
               RGBColor[0.6, 0.4, 0.2]}, {1, 2, 1, 2, 3, 1}, {
              Null, ElementwiseLayer, TotalLayer}, {
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT]}, {
              None, Tanh, None, LogisticSigmoid, None, None}]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Inputs", "Input1"], 
                 NeuralNetworks`NetPath["Nodes", "1"], 
                 NeuralNetworks`NetPath["Inputs", "Input2"], 
                 NeuralNetworks`NetPath["Nodes", "2"], 
                 NeuralNetworks`NetPath["Nodes", "3"], 
                 NeuralNetworks`NetPath["Outputs", "Output"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input1" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT]], 
               Association["Output" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT]], 
               Association[
               "1" -> Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "2" -> 
                Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "3" -> 
                Association[
                 "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                  Association["$InputCount" -> 2], "Inputs" -> 
                  Association["Input" -> {
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
             Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{237., {67.5, 72.5}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.707479221185155*^9, 
  3.7074792660303774`*^9},ExpressionUUID->"1e55be80-801f-464d-b746-\
e684e46b2433"]
}, Open  ]],

Cell["You can nest chains and layers", "Text",
 CellChangeTimes->{{3.7074792458737383`*^9, 
  3.7074792575766335`*^9}},ExpressionUUID->"0a58a0c0-b698-4864-9e95-\
1a88dfa736e9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net3", " ", "=", " ", 
  RowBox[{"NetChain", "[", " ", 
   RowBox[{"{", 
    RowBox[{"net2", ",", " ", 
     RowBox[{"ElementwiseLayer", "[", 
      RowBox[{
       RowBox[{"#", "+", "1"}], "&"}], "]"}], ",", " ", "net1", ",", " ", 
     "net1"}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.707479267446064*^9, 
  3.7074793024668255`*^9}},ExpressionUUID->"26bc1beb-9f59-4834-8795-\
aa63f6955277"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Graph", "Inputs" -> 
             Association["Input1" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]], "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                   "$Dimensions" -> 
                   NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                 Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> 
                   NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                   "$Dimensions" -> 
                   NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                 Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input1"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input2"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                 NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]}], 
           "2" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], "$Dimensions" -> 
               NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]]], "3" -> 
           Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                   "$Dimensions" -> 
                   NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                 Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> 
                   NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                   "$Dimensions" -> 
                   NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                 Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], "$Dimensions" -> 
                   NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                 Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]}, 
             "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]]], "4" -> 
           Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                   "$Dimensions" -> 
                   NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                 Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> 
                   NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                   "$Dimensions" -> 
                   NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                 Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], "$Dimensions" -> 
                   NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                 Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]}, 
             "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input1"] -> 
           NeuralNetworks`NetPath["Inputs", "Input1"], 
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input2"] -> 
           NeuralNetworks`NetPath["Inputs", "Input2"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input1" -> NeuralNetworks`TensorT[
             NeuralNetworks`ListT[
             NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
             NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[
             NeuralNetworks`ListT[
             NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
             NeuralNetworks`RealT]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`TensorT[
             NeuralNetworks`ListT[
             NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
             NeuralNetworks`RealT]]], NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input1\"", 
                   Annotation[#, {"Inputs", "Input1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", 
                   Annotation[#, {"Inputs", "Input1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input2\"", 
                   Annotation[#, {"Inputs", "Input2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", 
                   Annotation[#, {"Inputs", "Input2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    RowBox[{"1", "+", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False]}], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{150., {55., 60.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{{3.7074792858355813`*^9, 
  3.70747930316691*^9}},ExpressionUUID->"bc9ee998-3733-41a8-93d2-\
e178a46bb9e2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Encoders / Decoders", "Section",
 CellChangeTimes->{{3.7074793296761556`*^9, 
  3.70747933242667*^9}},ExpressionUUID->"459b56c6-ce22-47f4-ac13-\
43715cc92d92"],

Cell["\<\
Networks onnly work on tensors; encoders encode data into tensors\
\>", "Text",
 CellChangeTimes->{{3.70747934223594*^9, 
  3.707479350493986*^9}},ExpressionUUID->"4d41bd19-55ae-4755-9022-\
dc4296e5f160"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"enc", " ", "=", " ", 
  RowBox[{"NetEncoder", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Image\>\"", ",", " ", "28"}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7074793530245657`*^9, 
  3.707479358912812*^9}},ExpressionUUID->"5c2db8e1-2875-4d1d-8fb0-\
4947bc82cc46"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      PanelBox[
       GridBox[{{
          GridBox[{{
             StyleBox[
              TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox["\"Image\"", "SummaryItem"]}, {
             StyleBox[
              TemplateBox[{"\"ImageSize\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox[
              RowBox[{"{", 
                RowBox[{"28", ",", "28"}], "}"}], "SummaryItem"]}, {
             StyleBox[
              TemplateBox[{"\"ColorSpace\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox["\"RGB\"", "SummaryItem"]}, {
             StyleBox[
              TemplateBox[{"\"ColorChannels\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox["3", "SummaryItem"]}, {
             StyleBox[
              TemplateBox[{"\"MeanImage\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox["None", "SummaryItem"]}, {
             StyleBox[
              TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox[
              TemplateBox[{"\"3-tensor\"", "\" \"", 
                StyleBox[
                 
                 TemplateBox[{
                  "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                   "\" \"", 
                   
                   TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                  "RowDefault"], 
                 GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
              "SummaryItem"]}}, 
           GridBoxAlignment -> {
            "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           GridBoxSpacings -> {
            "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
        GridBoxAlignment -> {"Rows" -> {{Top}}}, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        BaselinePosition -> {1, 1}], BaselinePosition -> Baseline, 
       BaseStyle -> {
        ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
         3, ShowSyntaxStyles -> False}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetEncoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7074793592133913`*^9},ExpressionUUID->"1e0c724b-d6e1-4d16-b259-\
9cf21efb4332"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"im", " ", "=", " ", 
  RowBox[{"Import", "[", "\"\<ExampleData/peacock.tif\>\"", "]"}]}]], "Input",\
ExpressionUUID->"6a29d5d5-5122-4dc5-a86e-ae95c05ad6a1"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsevV3G1f+9jUzM0q2xWBJtpgssmSBQZIly5JBtmW2ZWZmO2ZmCDnkOMyc
NNCkSSFJMeVtt91u4dt2t+0W9Kq/dX97/4C95+oezRzpzMznPveBmYnKr1IV
2QIA6pytgyqviV9bm9ei9rZuaMx1pcXmQpPUXF9YXFhLz7ez7ty0fl5YP39+
/1/7X/tf+1/7X/v/aSw5jKWAM6XRNFEEXRRu7UxxBF0YSuEHMcXhCcnRbHk0
XRLBkEKpEig1CUqRRlEU0dTkaHpqDEMJZ6kQXDWKr8YkpCK4yTBBCkKsRIvV
WLEWJ87EJ2bHiozExPw4SWG8tICYnIdPzSemmUiqQoqyiJpWTEsro6WW01Ir
yCkVJGU1Ob2WqqqOU5qJmiqKsoSgLI7VlMQZKhm5VSyjmW0dtSWknGpGQR03
r5ZtqKBpC+Oyzczcak5OFbe4SawvZ2SUUJMyUVnlLF0hTZGJlWdgUvSx2nxa
mp6gUKOlaaikVIRSRxCIowpLhdUNSjY/UqJAJysJwiRkUjJOnkZIUmBkCkxK
Cl6RjM7Qk7V6ssZAVuvJKVqCMjs+o5iRXkIpak3Ul9PTTcSsckZtr1Jfxiiq
FzYNpBfUCvJrEzLLqLk1bH0FvXU8s3MuJ7cpwdSRWNqnMHVJ9DWM3BpmUR27
uIaVX07Nr2SYatn5NUx9eXxWFS27mq4pI2WaKTprr6RklMerTLHpBcSMArIq
h5BmiNXlUfLLuFkmuj4vvqgyoa5FnmWMzzXRiip5+WWs0iq+sZiuzSaYKrjZ
hVSNkWAopmSVWDs10xSvNhLS84jafGJqFkamR0oN1o6SZCL56ihuGpSbFi1I
RwhUSI4iiiGN4Mr/nHeGBEqXQGkiiLWLUzACYUwCO1zKi0qRYiUpcfxUMi+F
KFbiJWlIhRqenA5NlAXIVRHaXEx6LlaQHJmoRop1OJEWI0hHCTLQSdm4FFNc
ahFJWUrSlJM1RURNEUGZh9EWk1Qm/F8xqZJiKkoE166NfPTZwcZ2NkvkoEgP
48uDOvZkReABTRpirW1dr1SaEe4bCkrKqfE42zZzCi7INsgRGLNRqjQIPMKZ
gg7jkINSpDFCIWRw3MRXRFd3KzMKSN4BINjVJp1O/ujaEQPZT02yX26RnZ+v
2D+Q157LDwQA7w+46EBatAcmGLRXphhV+Es7XQKazeGNghShW0+tdLovJ0eD
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
JR5u4NHLy9XFXCsNGvm4zHh3pj843JfRmkk8NmoKA4AaAhTxAdmJ2M3R2vWx
Wpg/CHYBKQmRLRXS/3xzz5AC629OYeCd7l6dz8siH9zXBIGCazdnWXyfjFxc
x4CqqIzu4Q5mJvLC/UB9UUJBKqarQtRbL1GKgiC+YKA1WcELzNVireCsKua9
9eT46WMT7g7A1wP8/vPbzvagr0d5+WrduWvJrWO2J5/Qt65xJpbT//39uee3
co7tCbw5H/31ef6TPveDmeDbEynnhpC3dvg3zkgenU2/dzDpeBfk7hTqnYOE
4/3O985zfrFslm6q2VWYlx7W3z2tnm0P/PbLocpx+uWPN/ad6BkdLV5ba2xt
UyNRYGOzQZEcdeelpavXZsUSSH4+l8+L8vQAkAh76zLJ1Yu0copOQQ7zAMUZ
HLOBEwBAbTY3jR1WrqUNVCstv31s3a8S4iQsOBkd8Pv3L9LF6M6aVH8nYPn5
7a5GDZXkEx/riYI7NjVmWHlyfa3Dzw+EhIDq6hStOq66UiESRaOxjjaOYHSm
lEAJiYzxCoe4U+nR0AiQl8W2/PZlg9lkDwAuNiaOERpL9eEJYTwRJLucmlII
oaWDoiFcfBpQGJ3MTbDCkpCRQUZxSXhlA6agAcvUeYsKINFUwEsJQ8d7xrMh
cIwfRxCLwYd7+zsGhnh7+LlExITYuAIIzlesobaNlbBTEHiuv6aERU+BVPSn
/xWT2VnhTW0EU3nEuasVfYO0SnP0hYv15eUEoxGTnYUz5seLk0IioaC2USRK
CphbKtJmYHWZpLg4TzY3UK2HRSGBKplBgIcRYf6pQnwcwlPBh+vScAGe4M7l
ybcf7k+hhusY4RAA1lskBbzAOiV2oTHt6ERphYqE8gJCnAcl2v7kZl8iNcSK
Sagv+PWbJ5kK3N2LS/EI++XJ8nQF/NLZsQRO4NJyTXWtTKMnqXQ4vZEMR4C6
6sQ8fWyxgdRazmMjQLWeRIwEF460n9hXSUSA3f3lEo6rlWbvXVl9cHXfWG/x
ynS1jzs4crD51rUJLzdw7XrztfuKa0/4/esRNz9ozexI+NXy4P2b8uPt4NYC
/rWD4mcbzPECmw+fd4pTHOBxAHgDtwjAkQfuO2B4fNN0eAxyYy98pgt8/UPL
5LV6UiFy9359SZnT1y+qp0YgNz7pX77TlFlMfvH+OQQSpCmRGi1ubDzvzbeO
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
OJxnyI4l4MCVC3se3lqx6ntwIHj34/7+WUzLFEJXG0bVuaV2xd/8ZOLFGzXj
+eBGu//bM3EPZxIOt+KPD7JODdIutEe/3A9/YwR/t4d4pDZutBR9+Uz+J19N
xNJAQxfik683ovFAIPffOtJ+4/6Gqw/oGiyOQXt19pjnFgfhiOCQUNcYuDeF
AY1GeYZZncpf2pnzQ4UVvJ7h4vL6zNzitIIKJUcaFYIB6tKowk7M0JaouAvS
PIbdf0q175D0wd2SZw/LP3veaPlx7qcP2/7vRd2ja2lzU7DRKczulYLFHeWx
uxnnnuief1G/b0e+sqwtycMeXMnXygK/+fjcfJ8hOzGkLDmKjwCHJgpLVejl
ASM5CpTqGfz4QG8HcPXkkqcd2F4dsp4fAeb76MYRCSOyzZwy0ZObxA1jxbpN
9Bvrivkium8SO1AtgahEEftmzN++f8m6yKjRNvjgP1nFrBc0F0p++/JBGjf0
4eWltIQoKybL9DxrpC3W0w5t1P36402DNvLapfb33loy6sOv3mk8dD/r2uft
hf08Y5/w1N+Gn/04+fqt/BQxgBmZaZf3k08uBR9YdNm7E3LhNtiaCjm3Trx1
lnF0IaaQhpSCnZvJu/dT86fjsxckzIqYwWMlhjLCuWv9Nx9OkJg2SAywwm9g
MEudjjp0pHVzb21hMdVczYdEgRMn+5OkEGtArqiQ8RKijLnCTA3dyRacPzkh
5UUFuYPBZkOZgdtWloYJAT3V2iw5qSJLGBvt/K+vXrtzfS8R61mUJ7TCMs/A
slg+zVRRivNFeLQ7mRhQXqzAIt1TZAR5ItbqBxqr1JFBoLvRAI+0h4Q6hgQ5
x0T529mChsZ0dw9w8+YENc72p+/uGdIRTk6gqhG1eFhRN0asmxRwc/zaNhTf
WXb7+6GjLX7rXZCZqrDrB/O3p3XrY9rjyzkXFlIPtuNXi4JfGhOcaWevN5Lm
R8kWy1EWD+hyfe496XPxA4dOm49faK2oF04tVIuS8Hmm1PGJdidnQIqFsxi4
pCQiTwgLCgcown/5yd1TvS892oTjXMvrMwy5Im02q6iWJ1D5JBndj9417b2q
rhkO372lnVmnfPRR509fT3z2WsNbF7NPjsTeWGA+P5X2y/stv3zV++h+QUMn
fPdG7vRx8vV3tIeucl59r3JijL9vJevUdtFIJ8/y072zexu1XM90hmu+JLS9
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
k9U5zZ47nKSutO9f46VWY2qHYiOESCgoNfRX5ddoMgpig4juijhufUO+lf2b
/YLiU4LOXhuaWc1LzsYGhhi4+QB8iD2Li5qf7zAwAJ4eOyAeTivkOKOBf6gb
NzHSg+RIFmHjVGIIAySZYRQZLLeE29gSd/bKMNTV6Xl0uSpUmECQqEi5JbyC
Qg7E2L0dqqJchiYJL2DYhQTpBSCBuxOQCPEID1Ma0TvU3+XC/sX7Z7ZldAwJ
YflvTV6+Of/F62vnry4fOzdz/NLOPSe67ry/cuXB8Edfrx8+XTQ0xy5u89l9
WbNxO3fodHL7PuH+Byk3Pi95/Gdnx97IknFcWjtSUe2+frN4+2HV2t2Cmo3w
onkiPce2eJwXU+kfXew9vJZ46ERJY2ng2liMkAWOH6t0swfD3ekCGmzXdP2F
ozNCpoeAb3XyTNXojByCwwt3FjIruNpuHjfFbPmUonHcL7vaeNcB3tR6TP90
1IlTpW/fb3vxsPn4obicJrvDDzSVzZ7zG+zmBUzHUtjhQ6U63fWxOUb9QODu
U0XLR8qaJ2LtvMDUdAnMBcTGwDqb5G/dPIHz82KxST5IC2sn0DWcABXNjoGY
CKZBXJL35lYtjeZqbgR0//xweHNJTCd7WLyZCd/foG6tik+MjTAxAOdOLTbW
JEFsmZUa8c+vjzqaVFB+z8vkMWneEjE2EGfT3pObXRSVlsM1tgLR8SRVBhNK
Gevbbc5eIDWLVFrOQfiB2QWtSOz/wfPzZmbAG2YRxY/w9gLV9bij56PG1q32
ncQc2iu5eEJb1RJx+nrF61etJ5bx6yWWT+epNxZCT00EXh3CPpziHG3jrjey
Dk3xdX+sdg9T10+q6oc9+ldC2uZEcbl4TR7DwQvUTZQlauVIoktDawEcYeuH
srewAm+9faqlPbOkXJ5XJIL7GTC5vla2QKEI4/OD2EwUEe9sbgrilaFxKYTk
XIqNO0jOlYbyg5z9LchsJDMa0zikYcqRW0eHhya0mfmCta2u5vaU3CJuRgGr
ujmBxUMkq6henvokgpOnG0B46vl5AzsLgA8wgciHG+EdQXCRsgLxPhacYB9p
RECpWszCe/xbk1i8iSKRkFck6BvNPX5h7Oj5vntvL955a/L02fonH0x88nr5
4oOGPZfykmo9urfFFYthU5cShk5JGzepu24nLZ8X77ur3H0rYf56Qt+p6KbD
kvTZ8IThkNgOYumcmCAzyawJzi7BXr3c2VwZVlWA2VxLjo+1GR9ISZYTSGjr
vUu91YUJVibg2NGGADw4dbWmvofdMqAaXMzPqEPVTeEnjkQmVYG956PmNiN3
rgmuXi9//dH0l3fbHu1T3T6kuPs478EL7aF9opu3s4Kjwfy5uK3T5e99snjq
Wkb/HL6qD33yYU18sXdFl0AWjTbTA7mZoY/vb+r+991gR7OePggIdskoZEIu
ARW445eaWUKjsuo3m21tbrbFRYfr/vez7q/f4Q628QIaHe8ODeN37+9zsgUM
WoBO93lBtkDM8x0bzNH9+Y6PK0iQE8cGS3y9d8RISVlZUfFJdImCFMrwofL9
WwfyJxZr88pEpjZgeDLH0BgUlzIPHeyAODYuNmh1uVUswCG9LXzczbksn/RM
93vv5c0ccN5/KXj/QXVvt3T3vqI//ty+vM1frzJ7fwD12Sjh8TD23mDgy4mw
Jz3kt4fk59v5a7UB94+n/fLTRmKGxYlL0sZ+t6E1GTXGPpzlfPDslKxM4Bxq
V9SQ2tCab20PUjVRvf2V9Y05LFZARkaURiMkEJzt7AAcbgJVVUVsqDKOWluj
MjEGHC6ioJxFoJin5wmwZE9ihB+JiSZzfBjRviEc59xKkURJSkrjJajYHH5A
eYW8tV1FDLGgsdycnIG9PSASPBztgJujPi7AiYCxj+Kg1IrQ4a4cOR/DJLtR
8S6ROJfJjtKyFElTQZKE8p/cHR7uGBhkHhzqAPMFbLFj20BMR29sY7N0ZFhz
6GDLuct9d96Zuvb+8L5bldMnNbuuF5dNczJ6IhYu1beuxLfO00f38evnwnIH
gyqXOeUrfGEtklboUTApFJei6iZjiptonf1RQwPR549WB6PB5Ii4vATf3iBN
kmO9ncHBjf6k6HBXO3D4YGNBKZ4tMrp8d7CkPmrfhc7oXIsDD9Ul0x6DR2lz
x+PWjyf9/MfY3QuJh/rJ+2r9ni9z316MvLzCOLfB++K+9qv3Ow+cLere1FRv
5Wjn5Yt7hPsPc3YdYU4fYCqL7RVp3mEBNuVp8oI0zvXTy7LI0M/fuWdhAjBE
00s3542swMaBKkQQGByP7R+NtbYDH39yxsIIPHt8Xffr92YApMp4abGMmnxJ
ZjK1vCR+hwHQ6T6VS3DBQeYKMUr3+9tcqntjVSJUu7PT+d7eRgolxcNHr3e8
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
r5UpUpGrR0tLW8ITs2ApuQhZkvvcaj6BZBAaZtPbm5OTLSgpUkDJgsHws7UF
zW0ZLB5yeaMllOszdXTMOdIrpac0upj19evpOI2lFd9Xc+J4+NJ+kN5kPHIU
s+ctwMgFHmEASwDJYvLF3ZKjvdoSVK3C4Pe/9lf0MZkJDlV9rPc/HUrQmDQN
Uo/f6dL2xjWN5+9cbi3Xqq3NgLerKRnnFRLkHkbwwvo7aJL45juAVBisSqAj
vAzDSS6sSB8o14wNlZmZgvxCPhJtKJMTPWEgP4cTEWqnlAc018b5ue8IgDn+
/d2vuh91kDJrS/OYNG9NSgR0rrY4jkLywaKd3Oz18tKjoziE6pKEZEVYVgoz
MzmSTnJDuhl62uv1NZRtzg6PNFd+/uTW1RMbJv99jlOcz6WF2ifKgj5778CN
c203ztY9vdVx9XjJs3sdD680fv5s7uN3l959sHzp9MjuXQ1fvTx759zU4ZWq
NLFbfRZZ99NdbrB1ZRZzdigXqtQ8tos0xufqjRkK1byjK+7AvsYwgkFPfTSf
bJ6vxNEC9LuqY3YO5AUjTSYHSoqzOCS83c+vnkHO4+z0Zt+4wkLB3bubd29t
Xr02MDKNu/887ezjFHWNc8lQlE539VYPdncTfOO7Lce6JOCOsXCjm9qGAQeG
ZOQq4BQDdAQIp7rfusF/doIvAXc2CN/rVkvGJUS6fWo2p3kkO5jj3DKgOnC4
HRcAgnyA7p/3RZFO0RIYnWl3++YuS1MA9WSQv7u3q62VsR6XCuUaD90fr3X/
+x4yTOgY7qmEgo+hHpjb2WFhDHR/f2qiB4Y78y8cm1WIcH5eBqlJNDrVPVlN
Kq7g7DvebAUDxY2Uu0+m49TwCJaFgwsYn8i/cGEOigxrq93trblUCsLdXQ+P
d2Cw/eKSw5M19PbBXBzDSVMf78b0JcQH7L1Ssn5C44ACeLUgZuuw98pxMLVl
vHTUtGUGiFSOtbXCAyuC4ztDO2L4Qmiwc5/+uIdbhFVWhLRPx2SVez74sH1q
W1k9yB1ZLl/a7JUrw+1tQZCfvaUhWJ3uvnv1kL05SEtgO1sDfx/jQJR5T2e2
v69Bfb3SxQW4uQGoWjlBaI0C5Aj7IKxFQZGAzXQryGO0NcZSyXZQSMEj3I9t
Hrp5+hYvgt3bVqdOjGxsTFbEhrq56RPx7jSKPyXUl8sIYkcGUMmeeLQlwgMI
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
WnpuAlmA848FllqlysxDE5P4YiI1P13IzaSRYrMzgiCwNdcYiNmJBhnrnZdu
fPv5S+MDlQc2nbN76uprpQ31Ssi3zM20aRWUGhufy4qL/uP3k1DuqK6hK+Rp
8DSQi/JYm62W89PSYgCLFDbao4Ua/c1FEz06CI0GCQJiSLuZCosEoW7glae3
Lx4YOr7U5frXB3u6zDxCTK9DDsFyoq+kzEAzqom5mCDIMUpFiIWFxpoaATLb
my9MOX9lymyjiGSIllbl8FA5LS+BzYA32dU+EGM3W3kURKgnuHF2f7gXkLDw
104d/vuf3i4txuCQoKQCcexa3/SJLowonVSIqGyWOIeKmjvyZtflstKI/m31
+EHbzEZ1fRM/J9f/xq3ltnaZpYTo7fXkRTl7Z8xZSFBXzzxzfgyLC0qD+wWH
gMaWUgw+fnmzH3gBnZXPFuMiktxRxLjWfiuCEBUH9/QKAelY79k1Rz4vCoYC
ienAZET/8p9XQwKBvZr+4LmtAaf6z98/d+v2WqE8c3V/J1+ZzS/OQZBjU3CR
GFYGU5bXM9IQm+Qzs9C1tjUoU+CbW4rHRmvmp1uTYj1pRDgyPUIpya+uUOZg
Y+JioJPTNRqCWJxZpMgeHLXVNEgdzcqIeKAy0LKyQ/OoydnZYZCsaOUkWk5M
aTF1sNPI4yWT6ZE9/SYEOsA3AGShgjR6KpOTVlgIR2a57ezrnJuqyM8NO7rZ
lxIGbp5bwSECIA/Z0axucsghq/D9Ny/bayVRkWB5uQuJDMLjo2rqilJgPm1d
luAwUFImQmFiA0JBUkYojYdePTQVluaTkB0WDvfP4SGxBZlxyODgRHeRls6W
5GLzkrlCLDQEg5pMIyZKeHhYnH9ShE+Xo+T7L990ub45uNVfV1WoU5N0Wgqd
kdzSoh0cKD9+aKy3XZOSCPjcP7xUfmy8JDMLrK/VspjhTXV8i450dLu33SHJ
SAJ0Yige6cXPj2UQQqsMZFMRmkOKsJtoMmYSBemr5KRNd5uOLLS6fvkYOswS
jIiWADn/+9fWAyCCreTNT1ThkD6QHgX5A5kYef78tK8/UGtxN59eZxUkF7BS
19e601M8oXmWCrA2Exei8fZ6bXI05EBy/AGYHWl+9c5lh1mu5OMI6BAuN6Wm
SWRrljoGTXU9BkZB2p4+40h9YVsp8cGtCZkufmbbdvhkt0SWoVBlD42YW9qk
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
U6J/j8nFJePqqv6FF8cqqzNp7OCRqZI0JDhwtJ0jiCwUx/7rX/euPjU8PqLo
bGbbjOgqS65BllVronz6+rlXnt6ODQSXd7sTIkCFKbVMk31wvuPCgSXXv765
f+XApNMGdeyHr14UCzNZ7HDnCGNpq6hvjDe9aiwyJEkMiTRp6NiGeWTNXN3D
6Z5SV7SwOgcUCKRbkTijpJiASXZb3+MwKonLc81iQXqZlTbYr+PyYkvLCAJR
/Nxi5cCwTm8kFKtzScToMquQSkz2dgN11VLXb596uwMOM81RIxkZKHv/vVtI
RCCk2idPzqWm+kIBwcMdrK+NrG2MQrPx7L2bpVUlB87s/+yvr0fEgm//vv/+
e/WdS/Czr7f823X82iL+y4OUr9aw789lvrmd+9pBzjMznJdWZa/tY7+0hH60
kPrd0ZyHS2nHhtN++/XGyum2RC6YuVj5zMMeAg3s3TQMz5XnkJITkkIhWA44
m/GYNAIufbivScantNaV5GHTyDmphmIun4WDJwfr1GwoB/33P1+eObVKJcPe
f/dZiC17uysgrF67stPSZIIa+7cncJhYqIFCRNhKxXQy/OD63lxUyu3LJ3j5
6EhfIOPk6CWUzjpNR7Vqj7OSho2uMvGPb4+fP7FQX6nAIENLzFyP//sK9NWH
u2npYHS89IUXj5+7uOTmAQh56UIJzTnWJFSQpHqipoKKoUeQ2ZlpyHCBgkLl
ZnuHAiovs22gVFiMS0G7MSVJ9k6OxJDs6KHjmGD3anMyCmhMuP0HBqDz//SP
RwNdpsYqEQEdYtCSqyoF5RXQDi2x1xdBuamhVqoqxFzcXcKgElJSgy0lrJpa
4e8xeeyYfeegdXa2cOdwWT439Mz1vQi8+96Vcsj6bu7UX7kxkYUES0u2yXGt
kBMr4yc3VXGfPj/vKGF32sUaUXpfG79Ek1zI9KsxE88fmvjizWddP33t+u2r
EjX1L1+//POP75SVFQyOaMtqEE09hGJ9MoMX3DMqF+vSikqRIgtC10Ab2ajp
mDIwZKnz643HT48G+IDmGtFouz47yd3ZYezvsXBYqdPTNSYTqbKK2d2nnJqx
qnXohaW6haUGJisFnR2Cx0WXWgQWPaetSRPoA44dmkhNdENm+A85y1y/feHv
B6C1MOpZIyN1xSpGUCCICAe3nz7l5fPkPuqd01unntr87p8vhMeCb/5+8OmX
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
MjJfunyqJYkXvP/gXvOj/uHiOLKvpbm8ojygkJDhIe4GuvIGesoaajIKCvtP
n17evb5pYaoq+eszlB6TmFjoJJOTcJhIX0ioTx5dfv/tfeg+NBzeHua+XpZZ
ogQzC2VfmKmWLvD1NUxihRFi3KtKWYXZcdyE0MH2fEKEu+Svd59e3hClEdXk
QEMFf7y/sqc1O57s9d+fr/kHK7aPxN9/22buA776vmbydDRkkn2zyKJqm+6B
8NUT3Js7FS+/an18t/bJ44YrN/LnT7LKOv3bFnBF/cHzN/MIYjtkkklSWdiR
iRzPCIvK9hx4hFM8FRaNdUSgrcipiPRqupINIGag7OF6dp6HodkB8zOPQXsS
Y2BlJalQViktSVOVBz98uEeOdY4Ks/qnJglRRosTedhwk9nhgpXxUs1D4PKp
NlqMFeT81843RSKV/DzByqywr5P2+vkUGacfRzRxcQSWpqC6HJfEcPHxkB4b
TsFEHq6uoKSnRGDCXaE3/MnT0yFos9WtlhMXmtxD5dgFzv1rhEvv8ugValUL
PsPn0WPbqBN38aMnfZYvhJ64EjW45Hd6h3nqGk/DFNR0E3FJjlimx8xaGzLS
VpRDIpN82poyN1a7qoqZWWloyd8v71+erStmxIRa66iAs2vdQh5aXxMU5VCg
QIuPcpP8/vzz28vpySGQmXe28vq6Mv7+/cHeUr1KtrE+gNyyvioTSpierjZa
ajoHgPSHNy93rs1/+s/iYXMwslFec7wU1RpTcYp7/Qy9pd7dtxAde2baZWwI
kFigZEh9+Lxm9yIoqNUfn448MYvmR/p4g9VjkTee5yKLkfQRYVSBW0SqSX5r
/NByxc6jhWiK675DoKVLWFyWiEI7OTtqmpnIQcGYQgqHIFSQxtDVUtFUk1dW
OuTv7/rblw+QDr99dQdKldYWGpHhXpAax0eapfZ2Bv5hbroLumNrdRiKIils
PCrcPZED2W+gjv4+EslP7hDY3Vn099ItzCa31/HzMwgCVuS1s1MfX1zjxIeZ
acskxYVdP7cw2l0YG2356x8X+6dpDf2Iy8/EblFg+zFv635K45B3KB4cPcl8
9br921ed8+Pxy4N7x/n1jMsXct7/p//Ru6b68ZC8Lt+GBVznGhuVYsqvj0or
w+bVJa2eHZ0/2p3C3etyW1ib5IW24FZQPfB2FcN5cYJIcSWnsJQN1WtrM2V+
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
uxk//zE00+I9X+a024m80+z3pMXnUaPToyanZ33+T4cir3eSBotD1i8WvpEs
s0vMR09RR7YYvSdSuuZLIyiBedW84BgvQR2PlENiFtLaFxo1rQ9aeGpAtllc
y2anoaJinN3cNdrasw4cADExHkik7drqoKIMeHHvwu8/fOXt9K/rFl98NYtF
6hZnk9++OG+iA0b6Ujva4igk02OLVX6eKoQYc06i69BA2vRkdm42Op5s19pC
YjLNotAaL57ON1ZQ9TRBbjGlrIZpbQZEAtTnL0+AOjh5fyC3HTG1gbn3Jmt1
J+XIKPr7X5f//G310eXSq4uMC6MRN8dj7vYn7vbRX5xmfXnb8LtkS1Dps7BF
mF9HXLlD2jgVfP1yzPwUon8o7uL17qrauPmFyp0rE3k5pMYaroO13LNHJyV/
PaFRvHjc0I31XhJxbxOG8HBnFXlQV5lhanBI4SCYn248c3pAThpUldHjic6v
n68fVgV8blAKy6+ukjo3VtDXmb52ou7C5d7eAcHMcoW9t9xB7b32RvMXmnuO
F2a24H1pBgVDlNwBfM5AzNztiqGrhcO79dQjaOioWsuuXsvlDzEKZtI57eTw
TB9iUWhsVhAyydUtykBYF0/PCsUl+UYS3VmpkRnZJCANzdz9SkoA5mN44eyE
s62GrZmKsa5cU22hFADsxHgcNnJkqNXCXDovDzc/15iUGAlNqP9+982xpXEo
AOeIkv787T0m0tvYQA6CbitzdTtrnUvnj3u6G/l4GXu56fp56f/+5XFifADc
S/vR7rKfs8q5k11Xzgyb6IGBzjwT3T0eZ5DdTy7muruC9pGU47vd0WJE83Yj
szcVU4VoWIt4+jnvxip1qsBho9lvvdz60RH77zrd3tc5vT/ifqvK8t1E5N3G
sNVKZOORoLeSo6Ku0Nop7NJm/O1n9R5hBu44d1ZrYlRRlBPOqXK0Akb0ljYA
nVPVniHmgjySJ0zf1kmZQPZx9zhcVclBBFloqoPyUu6fv7xWlgHbqxM/vbuD
CvjX9zin1xua6hKW5mtrq5IEqQgWzWFogLU4l21rAbpb018+WxaLgkuLIz3d
pUg4B6EAScDrwWCgvy/xy08XRPxQEsE+Am8cHKWNDDocEmzQNlhy+tZc/fhe
J+VXP1c/epN7/JLo5pPOL/9bOX807eIA8elM3McThB9WKd9Npr4ZZz1YQl1a
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
XH053d9deXZKpKoEutpTCDF2y4vVNtYgiW1fWBLaP5BhbgEWlvO7+pkZ+QHz
G8WkVFeo6r3/z1ZxVWwY2aR+kP3g1eKzd+Nvvm9oGXR/8X3/l1+WtifoD6bQ
71acfpg3/3XS78/ZyB+PRr46GnFrMfLOVNjHAd8HVfaSp+0SyZnccbxomdB0
hnzudUnTaOzKVm73aNLGufpYguXRY7U1VXTIJJfmyx1twLvXaxLJPTdHqc42
LvQgnxspJwUEKXRCdLCm8r44XEgam/DV3XPyUsDaWHHrxNjMyJG9q2jTKYpS
INjLKgRmDTmPujpISQ1eWq0triYFY/XSC4MbBpnlXXH8ylB2fmDjREq8yCe3
mVTZz4ZTbM3DjAKSAm2w5u4UG6MQBReClhtRDck2phf45DTFRlCtU8RoAj3Q
yd0QjnBXVZc2MlFgsaMI+MD4+GBvT5M4EpzPI+1dRyMLSLEBkFWGBDoZ6RwK
hjktz/afPTUNOfwvPz4w1N6flU7L5NK315ezeWwTHQjJfyBG+8vuAyxaMBnn
qXQQ7FxcCEfYO9qoY1BusWjP85sTOWkEARst+flZc1kyPtRe8vdrhLvO2nxz
JNz81NGO10+2MgWo9JygvLa45C5eVCUltia6eoN3/E3e1g+NpnijvOP9IY21
QN8GGAWAQ15KhhQg5QLkDum7HXp5v3aiwOhBs+9WseNoM0wi2U7h+ZS14k4+
K6xawk6drZ460aRtBvAJXhwRKZoWmiZmNnYVTy/3iAvZ6lpAURlAr9rKVAGP
8TY8vI8U7Ts9XF+SxZD8/TnQybgyi33rwmJ+xr+u707lBPnD1G/eGnz8eCI7
E9HTmkyJdSjKxgYHqkyPi5YXyhxs942P5kL/WUcfDI6k8dKDcvLQD59M50FR
yhv0zGV0zIgPW4Hccsz3v21fejjMK0buPOj//NPyjYc5XZMBH/8af/W27eoE
8eUM6rtjtv9dtf5uMejVPParVerTM/wnZ3OfbGQ9m2PutIVdH4r6/ePAubeD
RafSu2+KB67wly6Jlzdzbj8byMiDf/jP1ubZNifng3SqGwQp8STbb79ZlUju
H18uh4aYzfCmx/ns7Ulure/jZlVWkO5sq3vp3OKRalFPazEkxZZa0aNbpxSl
AS7SW1kWxEXBNBWAphJQU4Iw9kAaD33+6lhhFTkcb+qH0ohl2Rc0Ecs7aUiS
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
6eNbMmFXLCZJ/+W7pi9fVTWU2m9NUrbbkOerPa5WOn/TF/aywfN9q9/7lsDX
HeiHo9FDYo9Tyym//D7HLXSfWymYGs4tLyDH0/xgrjpP7570gxu4emj6BZum
55KSuOiwSKeSOramOdA03wEhT894VVFlWrk0c2Rc9s8/b4qFjKycSGtXZRoz
YGC04rffnl3YOuLvbRUc6Kirv9vNy4hXGOvopePspfvVtzfv312nkXw+vrwm
/+39ja35Xz/eLBJEmxvulsvfH1tts7dX1NIAfn4WhgbAzna/r7eJif7eTDZ5
fLBxe/3I0fmxClHWwf95KwjUFFFs9UFRZmgIXCWR5DQ3WPru0fGp/tLhrsJ6
adpfvzwszqeGBJjWy9K83NVx4ZbZmWgBD1dTmcLPDJ8ZLmiuocvl9yaHctaP
Vh9fld69PXJuq317q+P82d5r1yaPLNSOT1dDFyUoih2alM4s1I1OVyyuNs3O
yzq6+PzcCBe3A4VC0vBgQaWYRsLbJMV6tzbw8rKjrl+eT4hHllck5+WT8QSH
0DArFhP1+NHJ8SGZie4eSQk3wMuqXJSGx7n4+OpWyOIh2a+erTh9t1DUCdv+
ouHDb+NjFZZnGxxv9Ac/7EW9qAv4cyLyZpPltU7br1epqzXWRxq05PKuuy+7
vEiqzVOUrZsFFy5kD/RE7NoHvv/tupoWqKop1lbfp6IEYAEWTp46wsK4JlmO
uhro6ZbkZMdpaYKrV9YYiZjzZ+cvX1w20NvNz44ND3beowAEWXRTg32YUDch
P5GdGN7TWshlR0jK2LoaYHa6zcJcxdlJr1Karau/B4v3nJ5tPbLYMTBcmcoM
y+YRjx1pXVjoQCeH9pzq0vIAq7c6BPWUlr5o+cfqcZnJUG/4yBh9YoA8NxC5
Mhx1tB+1OeB9vdPtRaXLTy2Yr4cY08WemyuJf8gPE1jKG5fK1kYLhmozvP2M
S+u4V24cMbfY5eCiSUsMdfc2JMbA3X10dx8EiayQPFGsrIHv5KbrDjO+e39z
dbU/kujZ2SGk0xAmJnsYyZgbN47+88+7p4/PpadFwWCGEMXT44Pc4bqDIxIP
GDSMb//+9TGTFnDx+Jj892/unl09tdwaHmx4cXv81x/vefvohYbbZuWQaXFI
LpckLKRlpKEEWaTLmyszw10Xt1ZmxltSErBaav+jye5aZhzeqrcu+cZmN9Jd
lUmFv398Qv7nk+d3Vrub+M/vHode1NZsXyIdQY5whbuq8bMgVqIX5kZksPwv
bbbfOt918WQj9Pjw5vCNC12Pbo/1dKSxkryLhVHuLiqBSDNFRUClhyirAQdn
vWhqoIu7FrRaYd46qczgsYmyto6sC5eGv3izMTtX6eejLiqK+vn7K1NjZe9e
nYH8U1kFlElSOOnYicnq1BRUMgP196c3miogOY7QWl8agnSKivIOCTf3RKiU
10a9/GZufjOnojv0g3y5qc3v/ljIuz6fZ32Ipy1e31R5fCdz/Tjg8XbE62yJ
5fOB4Ply5a9uc/6Sn2eJ8BmSoGNXhMvL1OVFmr0rmFuRgF2gf6DD39NRR3MH
hAPBEfa9nUIHywOs1AgKOVAu/wbKr7xchpWlWr6AgUPDs7l0bDgMyuK4mGC4
6+fd5RBQF+TEGusATIjFQGdRXk50V1sRkehFjgoQFrPo8eH6xvuCUS7iyrSu
/tJMPrGpje/lBc3vS08vXXQ6/pH8dUReUNNSXkIp4tHXfV/czCnL1uld4ZdP
5YcleZi77aVQHfk53qc3c5Z6gu81IB5Xet2QhWz1EQfGQ7+Vz3BkHr0zrBeX
+8frMh2ctEYX2tL5eC0DEIxySmaTUtOJnv7Gds4q2fnkYnECCmMfGekFh5kE
IR0XF/qePTlvarxHVpMp4Ed3t4mPTHcsL/YNDdT09JRLJJkt7UIIKqurM8bH
a9aP9sxO1BxbbP/h/dX8jAj53++unTx8fK67o57XIGNB1zI8XJqWicUQnZw9
NOKTg0xMdwgL6VCUL820Xjm9XCnkQW4JERMJ5xUbHfRfTf70ZnukLZtDg/XV
sYu5mI7qVAhz5P++kH96vL7ULs6nPbt/XP7vFzFEdwrRzcX+QFY6qrmeLZMy
MllBEaFmljpgtEOQlRTwzetTWamBdmYAF2bm4XSQEe9nZqQglXK0tUFzq4iR
QiBG+UPcGhHhCYPpOzurW1vtc7A/SKN5hodbCHKwly4Md7Rk6WuDSLzjvZsL
T+4elf/5PDcv2tNHf+dOsLLSBVWRXH6sXP7tyaOTkNOL8tMiI/ygwcSTHGyc
QHMP47s/NtuHs6497Hv6rrGl3PSHI+TvOhHPGpze1Nv/3uD4Y5XNV83wt23I
ZxLEy/qwa3W+k2IX+b+n1s7WkNLdGUKv+WMJo5PhFTK/lHTPOw8uQSOTnEjE
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
jZH/ajI1BVUsitdQBwYGwMtLKyHBJ4WBuH115urZoTMrzSwqrLE0rqMi6fLR
jg9Pjm8vtzy7Pn9po29ztV3+zz1rY/Db9zOHJ5KOrQj27QEZmW7dfamBIWoo
jP5X35w5f2FQLn9OxNlmMIOhtrl/B7h+adTNcbe0jBob7XJ8uXF0sLipLo2b
Fn5mYyCTg6mWpBCwduxUJIFg9/MP16GTSWKEeHjoVZSxt89MLS10Q/w41C+L
IPgJclMzeXEbZ2aAItA0A+PHxJv3O7Jbo8OKSfbJNuvvBa9+L8tM0KQx/Clz
065DiwCfqp0mteg9DspHnMYvuQ8dDpquVKEoxWeof/NjDyrXnVRFxHJ900To
mhY6OsKUWxC3deXYQRWAwtiPzYkKxdFlpXxFhc/bwKHInp2sG+gRebionzsz
Fk3yEBXQH909+t3X1yYGK0gYx1iyp5BPIWOdepoF1rpguqfCWB04mCq1fd6B
qCgV5zja6e/dBdxcjY8fmyjIT5o/3BGMtEljY6F45Sf714spZSVkG5895CpE
2kBEZnWQGX6PTaOXxwCSPxUxfJJZdyQivx9NKkQi0/0RmV4ReV6SDtLW9fIr
r5t4DaG6/vvV3ZWhYYEhDWU9sfQ0R0kNr6I2r3GsUNLFKStLpZL8UxPC01Lw
FJJXSWHyF8+v9LRVSspy83JYPnA7Xmb82e0jZ89OSaTMK1fndu0CGenRHu5G
tjbqk+MNRYVJp04Mw1x1uruKh4cqs3Mip2brklhhIVi7lfXu7GJipghR0x3j
E66OpTpSGP5f/Xy7qU8gKI0i0FyTMzHp/FgvhC2XH+viqcXihSDCdGcXmsLQ
TgMDlQkJIf/V5N694MsPV6GypK3/GUmd3FQ8vbRGh0R3r8/8+s2lnnpOcQYa
apXNJXEd0tQv7izJf7gt//f14kR1ey3r3182b1yoUdoFJkc4lhYAj9evqY2N
pjn0DAly8wkLCzK5/KWokBKM0Ed4qFsagp+/u2RvBVoa2DWSxJPHO0QFMagg
Cy+Y1snjfRi0/c0bi/ycKIhtzcwVWluzpdKUSBIMMpBaGbeinHnvzgmIzqqr
+LMzXRsnDxeXck+cnkbiHAwdFGx8d/UtCQ7fbGL2MwNK/Cq3Eu78Vn98kkgn
HPLPjkEN9zp3t7uMDDkNDRhWyWxkrQhpkaobIMUrXn9YJhuMQOf6s9uSYwTe
GUUBzGwvbLRDBB3N5KXiCHCegNg/JdIxAzaWRu72tkg/2+xMUkdL4eLhFjOD
HQ3V3CwObmpUOtpX2tUs2Fjt6u/M368AEijws+t9lgbA3fLAaJvIVBOY6+xK
Y+DLi9L84Dbc9Fg7ax3FPWBtdZSbGVMuTvu8YyKPfvPctB4AfeUJK1PlVKan
E93QO9M2pSY0ssjfJg0eUktFS9GUdgKqG8tez218OtX+eFRyLps9ho5sDcfV
YtXDNQzRGjYklaxWcmF7xuL1oft/rHDr0Z1TlcOzra3tpelppDhKUHFuEi0K
4eGk01jDz0qLfHD7tIudnqujKTOJkpOVmJMVK5e/KytPqpAkDo2IoBFobRdD
rRLCzP7eyoa6XF5GJCRLCtkL6pN5+TE29geZ6Rh6UqC54/68Msqx7Zr24eSR
w/yoOOeGNuHf8g9bl0e5QnSRlB7LDHKCWdq4mmQWUIKJFgi8QaYQe+xkP9zb
qG+wMgT1P/dmqanLHp2oUdgFbByVfINMsZEu7t7akCwjIxz++PH6Pz/c2F5t
gVrlVLvg+HS1REBZn2u8cLRf/s8XVULah+dLcvlteqR5egosLFgHhzdnpQVm
ZqG6+vLFlYyjR9t//uHm7euzX7449eHVqfHegs0THZA9drRk0qPdL5/7/F11
WekR6Rz8zFRjqSjl3ZsrUVGeaRxMIgP58dvr5ha7IgguUPknRrgzU8NPnxox
NtyjqQFgcIscfrKwJHP7ysrZG4vLW93s4jCgBoZOlSQ3EdClPnkLKec/9nz5
ppaMBwi6mSrewqGSoSeMsS2l7Il0UCS67fBUSs1zevJFQ98yI0HsE19NKZ/K
T8x1p6aaRTHsg0lOu9V2l9aUTM02QKldWp8GkZSasmKbrCYKjyguSKit4k6P
16GD7SFNHpmum52ouXd9sadNwOOgmYmImWExVMtzOKGSYnqbNMNIBTSUcRPJ
gQcBcLTSaK4pdnMwMtQ7kJSAZzGj6LSQHB5dWxOEBdl2t+SZa4DuGraIT2Cm
I51weni+H5JhHcby8GYG2cX7h4tjIloT3aoJHo0kK4EvvhkvmCPzZolpC5y8
09WomoSohli/LMvsbhKWCe8/Wn3zt5X2E/nz5/tmlnrp0RhxXmZ7nSiFjpZV
8PzgJlw26YtnF2YnWuNjUCFItzgapqm++M6tjcOHm/PyyV09OU0t6UJREiMZ
D7G5rEYwNFAFlShIk/J/3yEDLW7cWEaF2+Ij3Z6/PVskSTaw2aVjDpAYTQcP
cOlWl0CIzuRFLq72dfYX7joIhqcr7TwOwQNtnP3MqGy/7ApCDMeTnOrJySb4
I63m5tus7VT+q8k376+2dhTZOKiRYnzNHJW8gk09fHUdXJROn+5dmJFC1VH+
15PFYXFMiMXjC9P1xfG3tsbf3lv/+7t78r9eHZ+pgWD8+d3FlHjfkX4RxKSM
pKCausyu3mJruwMD/aUzk9VtjVmQWxJCTDGBhhe3BvBoK2yYFcSAj+8ftzDZ
DXfVDw12OLt1eHCgBgI9Dw+D5OTwVDbO2U1zbq5pY73fEHIbNw0KGV5fx9s4
MRwW6rJnLzA2UZXKCkm0oJb+0rFl2bGr3VsP+jKlwUmFLjiWJb2Y0LZWefPr
oUuvqxBU4BsDbEMAIlbTLBSEZWlFSxwk66yRp43p43RcqTelPEQwwC0dSmPm
2eWJvZJ5IbrWqmA3+EP+cyjGrLmLq2ejBrVWSzNDyAAzWdGNMkGIv83tqys5
GVHPHpzUVAXyv1++fX7m52+v11cml+SRMlICelu5qXGep9ZaEM4aSDf9ucE6
byc9LweDguwEIy3FkgJOeSlPVQlAsPbbLy8jib75ubFNdfy7D08yBBRSctDE
RDkebe7prymuTzJ32RXB8kGw/Jzjvdi1mb6JwQZYa5KU7JGoQylyjC/yihf6
x4lRsbVR6BpSZCeN0U/mdpI7h3JbOrO6lotblwo7xktm57uqa8ubm2rxKG9B
Oq2yOA3mqDc73giFODeNQsT4RBOD4qLD8RjPkaGavPxoWqxHbgFGJCbvOwCs
bTUgM5fLP3LYxOUjXfK/vji20gv1vbGxamiuewZLW3sKZ1ZawD5gBzsgyEcp
qYKTZxpyC8NyC8LvPlqEphJL8O4faVDRAWX1LEZ2MFcc4Y7SqBnk1g9k54no
Ftb7T5wcUvjf98wrqzgQ3X++5a+jso27mk+YWf9YeVOHgEKGySSpR480374w
/dMXly6s9WTFI2uF8X31vJzk0EdXjqxN1d7enmiuYMo/Pb1yZuLzJyq5RCOj
HQSSW2tHvpIyiCC6VFYm8TKxf396eHhMUlue/PrRCQirqSRYUS791rUVL3dD
FyddXZ2dS4t9RSLW4GAVBufh5KLDSiNCtHj27IyDw6GBgXI2C9PZXjzYL/3r
j7fnzi5ArTsMBYNO2MPH5NrDY6nZmGMXexuGuKdud3bPMJMEsNRSGrs2md1O
GrtZuHAna+JU7OJmZsd4VM9ydO8pWslUcGo/EtuONee6hBQFJsnI8BibnNqo
yuZwDt+5RJYEDW8YCdk9Wntyq8cXqQ8OgtAIlJmZnuJOMDpQGxpgW13OuXr+
SImQ4eGieWSm8dqluR+/u/nL9zcX5moqS2LxKPOwQIPmOuba4brqkmRnC2Vu
MqGiiF1ZxDl0ANCiQjNZ1N07wMLhAS+YRVVl9vGjI4b6u+Ty9xtbU4ccVK59
eUFDD+I+exLJGY23s3M56BZk6BPrEpjq7xTm4BjsgEwIiswKDU3QSyuF42Nt
SAxYTmVUSjmeXE3ASNDilbwQtuvasdYrFycPWQIIbYxs9ugZ7VXVOqikqgh3
syrOTTbU2Nksyz93avb6hRV8OMwPbpUSj6+V5Hp6mELpHEv3s3fcFxfv3tTE
gVissa6ouUX8/Q8vuCzywlQrxHdONvtExXEDI2Xzq60VtSkiCWV6VXLIHIwt
V1vagFs3BsbHs+eXCntH2Ui0VjDeLlOYKChPZxfEEVJ8IphwXLI7qwjdNllY
2pDsG2pySAd0DQjpDP//atLZ9eBXX1/WhjDNGDR0ZE0tVK1tdM0tNCYnh8E9
9GNIvqfWhr/94tZ3r2+cWxuk41wfXZ07Pldzdq15bqDw5a2Fp9eOzPSVvn18
aqBTCHM5FBRk4gFXKxFTQ1HGUKVkJPsGIo2hrjg30zw+WBVHhK/Pt4sF8X1t
pQ9vnWIy8NA4mJspndmeLZNw8ER3RkrYrr3g5OlJSHg0akitLE9cnqmhrlBS
nNneWslIiNg8OQf9KTraX00DuHlqaxuBZE64tInbNVrGyo8gpnmkVmLcoq3i
qsiMZnLViVzpCV7jmQLRPCe5IzK6LpQgRVJb8MiSAO9CpAfXJ4QDZ5Xigqi2
h0/Xx6Q6SRppe1UAO4fg5q03NltXVJbghzQPDHfXMlC2czLx8rYdG6wJ8be4
d2MVwhyo6yIQpuFYp9/+eHbi5MD8UuvwSDkO61BWEheCNMGiLNJSgksK4o8u
f940tLbY7+aox06O2KUAcGgf6BGi75KijHxBsrWFuoYa4HGpDx6dCSa4NPcV
O8PU3T21+EKqsjZARbo5+unvNgTIWK9ACtwl1CoqAx2e4CmQ0WkZ3im54ZKO
DFFDSkVXZuWgoGZCWNyZYeR+kFdIk9Rlmruq6tvsd4IbgV3AzFa3qU0CvaKp
/gFPF5PNEzPFeUx1JWBlohpDQnY2l/3z6csogm8GKxIT5lhTnbFnJ+hpEx4A
oLdJ9sunj8IS3kR364urp+Q/3aDhTJqa0649XGALsBsXO6YWWJLWULPAHbRc
pKSafvNyz4kTws7+aBxVJzHHPa8pUtibRCoId4l2Ngu19qZ6s8uiJR1pbYO5
KRkh9p4qvuEGxDgHEt3xv5p0dNktLKI2t/CWVhp7BvNqmpgp7CBkqEVoqD2X
S6mX5VeVZx1fGjo631dRkFRVwijKxo9089Li3I6MFFw91b290vrh+am7l2bf
PDklLqJnpIU6u+7PFoQTyDbdg/xUDpLJCevoLj5/buHaxRVPe/XnN45V5CWX
5CRd2lrCoOCdbWUIP+vL15bQBBcPb/3MnCjIAO8/3FQ6CPT19kHH8spIjUxo
bqGVmR4fjHSbmezAYz3i4/whKIuhwhFIo/NXZjX0gZHFfkmLoLSLW9DDYtbH
JDfE4ERBERUoTDmK1kFz4bqRmmMgHVowHLz4geT6eMNIK0Sab2FrCjbWgcby
Eslic0oiYhiwXQdAWXWCf4hJcXkiKwPv4KJNjPLHEBA6BkrJzEgaxe/i9sRe
BfD2zcWhoUpmGjY43O7G/aM37x39R/62uS2fRvf18dYfHSqzNNnBZASnpaL9
fEyrpdlVEl4aMxKSYkIsDqIbPo/R3VGVx09xdTJ2sNUJC3Z7/uRiNDkAqivl
0lRBIXX3QSCuycjIp5o5q4VEeQRFuZNSQ2x89YMoMBoXUyhjYmI9cyrji2pT
eGXRZ+8ejkzywdJgKob//7/1D4DJpbayWl4cC+/ua15axesdrSuuzAQ7ASUS
6e1uXlWW7e9lc/nsmo+H1R4AVBTBHz+/kf/zrUyS4+1hEuBjAUUA3E27v11c
yE58fO3cm3ePeILU9y/vb6+Nnz1aH+Kv3NiW0T4qru3NL2+I/fWPCUqswux2
ITLW4M3HteMny+89a1nb5k8dyxpdz+bWB0aL3P1Y1rBEZ0eKuyfVG8vy5pTg
7D0VXXxVqRy/uOyAtQtNYZEm/9WkvdPO+kbOuy+3g0KMXWAHebm4kYmy0Ump
QBBTWMgwMtiLQ7mnJGDWVwfPrA8/ubcqLaNnZwbUS2OqSoknjkhbJYly+fOV
WVlve65c/npzs09NHfBysYGhBi2dXGZ60MbJXjv7g48fb12/tPzTVzdXJxox
CLvyQvb7lzejo4K0NRT0dHc9fno2JzcmhYX+f+2d91da6fr2dxJjmjEx9t67
2FFQsQKiUlQQEaWIilIUAUHEjhV7711jL4k9Mc2YxPTeeyZlMr2c6XNmeHfO
95c5v71/wNlrLxYoC7Y8133d1wf3fp62TvmuXcDCfPeRQ4CNtRZoic+ebTk6
6HAySPgoWGE+W5JNLS5itbWJyiqYAmFkAt1nfrmJmY42td6jbQaoGwMWARq6
0F02EbqE3FBaDZHbm+JMt8UUotzT3Hx4vnFKilcq1C7O0TfVHxJrH53uj6O5
J2eFJnEQ+ZWJ9u67c4vicmREb5ju4EiZSEINCnNBYbxy87lmVtr1DUXTRxsN
tQEviO6Hd9c+LRNmsXt5rQ/Mga8+2wbzDxxuPn5UqXsI8HDSLMmjJcTCnOwO
kmLhDBrG3HTv2HCDTMJydjA8uB8Axfns8ZXl4yPgQ1dnI/ChSvUNSN8//fRY
LI2PivY0MAf4EgocaWfieNDex1Cu5IcRfUpbRKKyFDwDkSaJ6Z9TRiR4RzNg
mqZANN1vjzbgHmDgFWQM4oC8LPXUxcn2gdLqZqmiOssLZmntoOUNt/Lxswa7
kom+2u8/vQHfLhLpLeAkGOvudnUwmJ/sun5pNRLl6WSrFYP1qSrjmhkBIj7p
xoWl5blehYLbNaD44Y9XkmIageLY1p+9tjlZ21VZ01lRVc/ZPpsjE+hUlLk/
fts2coLTPJ+09bx6apNTNxrVPkOevyjJb48iSzx9KCbZrbQ4aQgy2ZEsgOq5
AOyiUBzHxwmt2zIjev/r1j81ub7RBHHbDyYQmZzY2S2iMnyx0c6FpUyZLGlo
qJLPJ2VnxXt5GBBjfaRiUmeb8MypVlayR2dnSnUlMYcfeHq59tGtye++uAhy
9MpKKyjLXXuA9j4xMx1BSvTIEKA7e2XdfYXWdgeePDqj+u3VTx9vS3nxUWHu
d66eRAe7w31sQeE9fnzO29dkP5heGnK8vIzfv70ZT0KBctU6BIjEJHC4SbH+
THq4gQ7AZoVXlqUGIfRJcZC6+rQTG60Pnixvbo8Oj1cPTFbW9ubQc9DxwtCo
dJ/0KjJNgfdjuYbwfWnVRGuccUx+VFQOxiXGwYviBiE44ThhflgbeVUSOQVG
YkC3b41Hx7sm0GC05MDkNKQwJ66wJM3bxwKHDwAdhs6MbW0r56cT4wi+Zoa7
VH+9a2rIbWiQolCQX3999eefb+/cWfPxNmWzInQ0gKrijLwsSkUhmxTta2mu
HhzoSE8K56aT+Bwy6JBgWwS5uyCP++ThNo0aFRrkCvW0/OmHl2D5l5Sk9vUX
gZiQxsUiI13JjFD1w8Cuw0B+NT+Jh1c052DiYeFx3swsnGewKZh77Tw1c8sY
8SlBDF64vDw5ISU4kuRJZgZuXp7ii8j2EC1L+wNh4a6IMMf9msDuPQDIU22N
+WCQqCjJDPZ3AJMk2L67WhQLU91ri4NGujs8XPSgHgYNNQL1ncCnK7z+/vLs
2kh9vfDJy3NDU3UMTnhWDrq6MaW6Q5JfKyysFbX2ZF+7mN/T6r8wTx+ep9fP
x83elhb1hhd1hHbNxCpa/Br6CCNLmX2Loub5rN4zBb6JxvkDqQQhtLCf6hZ7
2D5CT9DMmL3WcvfL1X9qMlsYXlub3tkpXF1vFkvwoP8wmIFEkrehEZCbmwi6
VmCglTdUr6Mz1xumXahIqGthMdiespLwlk5aKstNIgxJTfbp6xF//vlWe7d0
68rRL364PjBeyBFiyuqSWdwQWRGlezDfP9hifLzm958e3dyeW53vpMcjl+b6
xZm0A3uBpMTwUxvjAkGcjc3+wnwWqMOZ8VZT/QPFBRxzM6CrK6exQXB0uFxj
L8BODuvvkomyIgZ6cmS5UTi8VSjKyNIOqKxjK6rShbJ4eSVTrEgIiraL4yEy
yymxWYEhdPdAuptzlAk6DU7JiYrJRAWQ3GHRrtBIZysvLQo7lMENre3ICic4
fPvTzaNTlaFo6yQaor5BYGj46bRwGiOCw6WgI2BlFbkaBwGQTGVimouT7txM
G4iiCH+7u7c3wNYM3gdHE4fxJmLhewFAkBpbIKB31skOqAPmpmqgvYOwUF+T
G4xwisEHFeXz/2OMPzx/crW1qdTBVkcmSQWNC4/19fbSP7nRB37mVFpwU1te
PC3MzE7T3c9yeKYFhnKMjPeHoey9g8x3Hwa4EmJdp4SbEwvuHHGMG1wfUAfQ
OBeIt7aN8/5glP3qRr9/sFVpZUZFdaasIBm8ZaVF+sEsL2/NffXhdnioq6PN
4Rgs3NFG64t3d0B2qyzNDAt0IuJhrk5a1eUczf2f1pJ+vr1YnEVtaSsCDy83
i+Fjq7UxoVifz0eRjKc2K3iFYSPz/Il5uqwC2rKQmVKJzOsNb5whT6yLVjcL
V05yp+eTRyczOgbZJa2JbcfE5bNpgp44yRCX284MyXRnKnGeSU4EaXhuf2pW
3X9d312qoJSV0cjxbvcfzDk4qIVH2ERhnWJiPXX1gLZOWWCIlTtUN0dOaWjL
qu/g2bvvsHMHCmoIwuJQGsd5djmPyrAfGc8Zny1ZP9tx4frE6Fz12mbft3/e
PmgEbFzuA3tic5+ooimjc7goiRXc0ixaOdb65MGpqbGG4T7lUH8dODpgUwa5
28/P6rAm0FAncbHXeXz3PJhzUEFuetpAZRWjuCDh918e9HfJ9+wElBWsAlls
ZxtIBxgC3qKsnJKbF9PdL/vux3smlju8/Q2DImxi6bAkXmhWcVz3TGkUEwpB
GuBS/Uy9NNj5pHCKN1tC8gmzNXc5jCFC7dw1A9CWmTmxAaEWTW1iTiY2gxMp
zaWUKdg6R4D52c6J8RbQxm/f2QQFSSQhnZ30Zmc6AhEOf//18cb1NdB2nj+9
+ODemWuXFj9Ne259GB0E0d4PuNvozA61RAS7sZOjnB0P29kc4nFIMXj/aJwf
O4VkZ63Dy0gANfn00WUOO36PGnB0pPnvPz96uBmVl6V3d8mdHA8eOgQ8e3Hx
wCFAz1gtlhqqbM5jcmOCMe5eAZYtvUU1zSL/UGtQhFfvLL776joq0oXCCBRK
KSUVaYnM4AR6IIdPSKSHpHNxuGgPkFUh7lrgaO7dC2TyYv/965u1xT5DHcDH
w7S8mAdx0O1qLUllRFWU8L1cDUBBmhgA/AxcQhxsfb5VmBT+5ZOLdbXSkbHG
REII0tPsxkZnUw05WQpdvVUbTNA4eamobiiqfz0dl+nasSg5dTX/6cvmm1fr
Ty/JXt6pfXCt/OmD3ql5mbIvtWCQ0bopbbpQkNLOjC6NpTXEB2b6FkzIE0qI
UdkBqLT/uvZh+/IADmfv5b3/q68vODvvKSigNjcLWttEzS2i3HwqiQpz8z1i
7aqOo0BquzO6p3NcAtWGliW5dVH5TTg83TQuzW7kuIzOhy+carr8aH7j6vDI
8eoXX29mFkZPnqxZ2GwuaWEdP98ur01uG5LbOe1RVnNUqg+Lx7rnpjsry7JD
g1wwKM/xsUaw8YF8KuSTwwKc1hZG9gCAofYud4iGUIA5PlcTgbQZ6i4Q8bEi
fmR9Vcq7V2tnNpoOHwIxx3XPPoBAdAdfU/0AwMnCY4keZJp/WX1GiiCCn08C
YZzAgMEjbKzcNaISfIQFScunh4LRToe0gUQG2snjCArrBHqsjiHw5PnpAISZ
MJu0MNeGQTq7QfRAMPnxhxcwX9vMLPqOnQCHSw2PhGIJfjt2AY+eXPjpl9fF
RRw3iMHvv34myU5CBbv4eVkiEc7cFCIrIdJAc2d/R3lSfAgYe6LxcGJMQG21
BAzJIG6D/RqsxBOrEx/fP1yY7f+PZ3537vR0uSLz5x8eG+kBnHR8SQmbyYo0
Nt9rbacVEOJ8fHVoaWP0/PYxRzfdU+fHuwdKzG3UedmxPQNli6u97l4GOXmJ
YPpFYZwLilmYKFehiGhiCsDgRjC4oSvkEHirrweofZrq9sPVS3MpDHQAzHzP
pykOPowN1i4v9BIifbrbSsgx/r5eRtFYD2UFV8DD93bk1RSx//7x6bHZZn9/
y/Zm2ZOnGyX1rNqRrLIBTtechMODdw0wc9pCSoYjbzxq+viq5+JC6npn9HQF
frmOMpiPaMqBPrrW/NW3K02T3PZzeZVns6suFtRfbmF0ctX9NPquDLxQvbTH
WlPyIuNE6H9q0s9f++nT5TCk0fqJRjAuBsANIJAD1jY7QbAdm67ccwiITvTg
ybCoOBtuIZpThGIXBU+cKyofTLr2YXhoI0dUj8EwrTrnpYNLirkzzY+/OL10
ofPsraHjW8233y0IyvDrt3r7lhWbT6aqejKnF2tz8ynnL473D1XcvH2yuakg
LTU6LMTl3p2TIE2DxFdfnVMgSZkZ7WCQcdoaAAELqa9NE/Aw+keA+zeOpdKC
KbGememoiZGC2amSPClu7GghWESpaWiV6vNEeli2JH6/FgACAjzMwt5Dk5dL
LFSm4RJ9yxp5OIoPmuAulCWYWqqTyIE21prhER6uXroObpr5JUwXD+3Tp4fB
4OrjbdzRVgjzMtXYA+QI6d9+9ZjHpejp7vL0sibEBtk4asuLM+pb8tlcopGJ
ulzO+vjhFhgsMWEQd2d9b4iRp7OhiJ9UnMcLQ7gRIuBwX4uKMm5IkJOzo444
mxaO9CDFhIKyPD4/2NFaPjvVMzzQaG+jff/OucmjLWAJqP56D3XT93bXv3Nr
XZidaGy6R1sXOLY0EImD/fjrm6TkKEANqKoVTc+1pLCjaExUlVLYP1j1fxe3
BgTZ7FADVfeRw8Gx2ZGgMdpY74bDDN1cD5GI3uXlrIL8pJ6OvP7uosT4wEoF
x9nu8NWLC/QEFMjaoE8S8X5g8wKLsUievLTQhgy2RfiattSIXz/e7GiSMpnI
r/91t2WooHYot2xQkN/PrZkQsjg+YKNcuafc/tBxejN3sgO/WBu8URV4vjZq
U4m90hH/5Fh2LtO0r5v0nerkua960wZwpZuSnke94tk8jYAjYZnhhYNF5ghD
iiQCzfivtUhqa9N27wZevlrB4qwvbQ1p7AOwWKc4srer28GjMxXCvOilM61D
x0rHVhXRGa6kLA9xU3RSng9J7Da0Ke84JUyuClTOZpx9MXz8auvSdtuZm/2b
dwcWTlevXWm88mJk415ny7x4crth/cmIpJm+tNWBJNgfna1p7sp7/8VtXmY8
hxcny2VdujAXHxcANpR7N0/CPa1Ge5tAn7Q21iTHQuemlbE4t2B/sy/fXrl2
YToswAKM5Z/mKCB7bG8NgGHDzBTA4TyQaPevv39CTEDQ0zGRRG8mJzKG6u8V
aHLt4XI8K9jCaW/feHlYpHMQynH91OiJjVGwI4sltMBQ+0CUnbYBwM0injw5
9PTpeXoSKpNHzkghqO8AzmxMPrq/aWmhAYI/g4kPRbnrm+/pGCyHBdpo6QJf
fnMXzMASMRUc33wJjRwN83Yz9HYzZiRF2Fge5nGoFuYHc0SJttb7wcC5fy+Q
TI8qL80yM9bYuxugxmP+/O2LksKsQjnP19v683f33r25uXl2WqX6kk4J1TkE
fPb6GphnQEOOjII3thRjomDMFHzvgDIkDDI10x4UZE8iBQwMVNbX5SIC7LWP
AIcPAwiELRbrCWoyNSU8kRpoZAiEICxKC5nzM3V93fKF2fqVxdaBnkJchAvU
Q+/TbJB/fnbj8iLYvrU0AFFmgq2FRn+XwlAX+Orzm5cvTCHgZjIRVcIl3764
xE3Ft3UVXn99Ghph09wlbRqUptbH8boTqkbZT7+e33rUJW/E5zdi6uvDJst9
LjUizpW5P+hA32xAXmpGnepCDjT5Tq8nfKYa776WE9cQNPuut+5cCVaKSa1M
8Sf56jlpCsppVZ3if2rS11fb1VWDnY7YutCzdbaPnx6howWoqQFe0MMnN7um
l6pbBoW0LL/EbFhec7wH7jC7HInJsJV1k/IGKKKhOOUJQc9W4dT1uvnt+omT
ioEZSW0HvW+CN3uyoK4vcXhNeuppz9SNxtFr9e3rJX2LpclCZG4lbWKp8dKt
Y3+rvgR5kJWK3dgYTk/DujgcOnty/IAa8N3nz5H+3rT4KFpC8MrxNh1NYM8O
IDIUMjmkfPX4jKfzoZry1HOnuh/eW8zMjEpjh2Oi3PlZCb/+8T6BHg6mrIN6
ADzU1sJRAxRnkZJT3pjpF2YD/hwWaEWhhyrrc/LyU6Qylo4e4OSuEwD+Su2T
JhNpKHCUR4ZqQ4OdPSFGZsZ7O9tKA/ztuZy4nWpAOodoaavpi7A2NN9lYAro
6APVVRxqPKy0gKFUsE+tdPe2yfS1gKhwV1B+GelEPAHBSMYePPApwgX42YLc
bW6yLzuT6uZi6minT8AiyktFKtX34UhoZLiP6u9vFhf6Xj67DLISWAvPHp6f
m+nIk6XaWB8KQDjfuXtOIGJkCelaR4C+AeXIcH1Pd3lggP3xhR6pJBkMMHGk
YLDEQOff2pq5uDU7O91cruD095WMj1TVVHLAZIgKsQkOML9+eebDZxdtLHbZ
WOwW8KJB9fa0Fwf72+MjoAW5KQwqOp2FB2V55cL8xtqAvjbQ1iBtr5ERI+H+
PtZv3986ttGPjnYtr0hTtnECeQ6VJ/jnnjZfetVPkIfSG6hF46KOKeHRFvyi
0u92P/JWq//lStiXc7R7Y5hzE2FNDU5Pv23sPyuiK0MmHzV2nC+jFESnlSTT
M8nZBakt/fktffJ/ajIuFmwo7hBXNWUNs7WRT0/wX1lstrAAyiro1GTfOLrb
4rn62DTXtVvtacWhVCk8OsudKodTC/37LynYPdHjz5t7thXVM5yhdfn8qeJH
L4Z//Gnl7oOWC1fLFzbEFd0x2Q0YQWeM7Gjq6I2GrFri8e0OU/ddC2e7Zk92
rm+OWdjtP7bcffLkAJ8fHRsDXV3uN9bbde7krK2ZDog5ywvdyQw0NS6oUJaK
Q3sXSFhlhekSQZyynF1akDQ9Ua0oZUkkCWD0iokFs31kQ0dxVFwAJhaeJiCx
eNF2bkccPHT4EnJ6NjFPkRYWAdHUAXIL0jYvzhub7XPxMCos43gFmO85CDBS
MF09im+/f7p9adHQQA3MeL7elp3tJUfHGhMoYZ7eJhRqqKHpTrV9ADnBz8Z2
t0xCKs1PKM4lbq52lEnJj65OsxMRQT6G1iYAJw2LDHX2cDcGrdvZ8YgbRIfF
jGKnEkBBergaH5sb+BQg//o2GOF66sR0ANyJnhj5xYcHfd2V//79w+1ra6Am
ezvKlo8PmJtpGOjvLi7JjokNXVoe+/qbZ4hAl7UTY60tRWo7ATAqgAJOYeEP
aQKSHJYrxBDU6oWt+dHhOk56dGF+KphjCVGesXgvb3ddZlLIUE+JsjydkRh4
/sxwRSm7uV50fK4NdMjr20vxsYEhAY6gwyNgNqBKm2olcdF+sTjfhanWxqoc
mAf4OVSCibc0i8Yg+CTR4VV9qX5src2Ptc/fNHph9waNcf0WKjD1+Rqupm5+
h7saohe7I64O4W+2RL4bo95o83uxSKzI1n7xVPnlbxtx2fDTz4cnLrcmiKND
SIFTi4N7NIDfVC+bOmX/1OS9W4vmJkASDbq2Ugda9+tnp4nRbixWYHtndnVj
SveIOCrBhsh2JWd5x/Bce0/k63kDlFz/aBG071Ll0OPmstPizD6ycpb78OP0
l98vfv529NXD1tcPGz573vT2Q/cPfx2f2spLUQbLjjJFg3R+E3F8qzYg3mZ4
TdkwJN+8NXtya+yXv16WV2UIsmM0NIB7d9ZBTT68fT482MfGQuf0xngyA2Nm
sgfubRnkZ5+bTVfkZzRUZ3NSw9V3AcPDxc+en5Ll043Mdrm4GYWgPdv7q32D
HCwdj3j6WcFDHJE4z4pa4dKpwboW6c69QDDaJZUbjYv1lxWym9qLHT0M6enY
kEhIaJQr1N9cIE568GhzZW0Ej4NrHgQuXTxmZKi2dmLY2vYgHGHl6WNsaPIp
1aSxgiKRFtkZYRlUaJEAQ8VYDday75/rz6TCeUn+8VhXmIcuOtQ+OysuJgaO
x3rZWO3zhVqAmHPz2jqoRtAYwUgZSwi+fHFV8wAYmBEDvTVXLq2AuPfXH5//
/tNrdTWgukL0+2/vQAPc9Skf/iDP562fmALZPwABsbXTuX/nDIjqjTXSk2tj
IcGu40dbx0abWcmExgZ5agohkYISZFIwaI/DmoC12V47ywMG2gCNEvrtx9uG
2sCBPUAEygHs3fm59MnR+hgsTCqkgeiNCobYmGtMjDT2dZZVlmaCYL56vBfu
bVacz4oh+AwN1qQyw9Pi/Jsr2WisXW5rQmC28XvVKptvg8/0Jl4adJrrBWyc
ACMLwPCgug7QoIy5uSjcao69VIO80Rr0eIrQJrO9fan0qx82IxK9Np/NciuS
xDVZS+cXFMo8B2eD7356CEOY/1OT58+MSkVx05Olyiq6pSlw6+psAhlaU5Oa
lh7EFYXFJjmlCAMyi8Ire1kuqAP1MwJ9byCYYUPJC15+Mdx7v0kwmbLy2eDj
n1cefzZ6abP04mLWjZXM26uc7cXkK2f4G2cyX3w//Eq1XLXI43SRCsdS+A0x
eL5P1bCwYVS+fGEQGmy2eW1qaLw8INg8Cgvh8Qjgh7m+MrZ7B2BpqjU92ero
qIVGuVPjkfREDMRB5+Be4Iv3V6Vikp4esLU1ODxatHlxDNgNpGYQdu4Bfv7j
w9VbG2AvBmEkDOOBjYWBcG1suaexVV5alenpa+EFs7S0O8zLpuLigv1CnQur
uQSqn7mTRgDKISePNb/Y+/W3T4pKeEwWFhPprW+469GTTXoy2sp+X2CYtaeX
loiPIUfawBx38hI85juzStIDlXxkdwEpLxFalYmRsRBVOcQ4jIO3s2ZMpCsp
GkqKhbs4aYGAIxRQRwbrUpg4UJbcdEp6alxzQ3FcbBgyxHN8tOWvP74ICnBU
/f1VU0Me+Oe/eXltbLQRbMfeUNsf//X+9t0LaIwfJspPmpve1197+CAAfhTP
H21VKAScDLKPr/2OnYBEmnr71umwUHcry0O2NoeNDXZDnPTB14wh+EHdTfjp
xG8+3t+nBhjoAFZmu8CuPTFak0gOlokZflArkMXyxCm8tDjwTn9XBY2CUv31
xdrigC/URF6SdG67/8mjY44uQMMYO70E7YU0KO7JTGiOPv/XhlXQIWFnEXfj
DIAgAKZugL0/YOkN6JuDw3FqXrneyjhTG3mxGXVzNG6wKuTJ3d4nb8/E8wiT
W2NHz464IF2ik/GjM31xVHRcEkIsT/ynJmcmGkBv72jLSoh3xWEc1pdaSwqT
nJ13W1gBF28MhGKNiuriwymWqXnBrPwQbIZrdn0cuxyf1Ug5/WG27367dD7z
ier84x+ObW6Vb6/nPjud+/a06M16xvMTabdPsTdWWd3j5IVrRQ9V6ye/GK08
zhf3JNCKwzIqY3uWK2bPdOw4DFy+f6yqgY/GOoWF27FYaFNj9eXjQ2oAkJgQ
WVzEAaO7mele0LhAdsiVMHPF1MkJpbu7JibSOjcvNgxj8dvfT918dCKiPdBY
z5Z2xafLbA8BYPTCREL3awAkcnB0rB8S7cpIiWSm4iIJME9fy+r63HMXjy9t
jOGoAcJiOgLjdEAPqGyQYnA+r9/ePHVmKgrnq6EJJKdEpWbgQtAOLl5HyDR/
ChWaEGVXK8Ef6xSMVNJXOzJHS8izVYknWzPOdAumlUwezr6jiCpLQ5JQdqx4
ODMhwNfLgJYYivC32/NpxQp+nVLq4mikpQlc2Fz8/ZfPm+qL7G10w4LdXj2/
trF+dHVpaGVpAOptfv/e2YrKHNAklXX56ydnpTKuSvUvXf197z88/Fv1XTIT
z2Jgoe6mYNy1sdbKzKLPzPbYO+hVlIuYDByPSwHFHEsIJEYHebiagiUgz0l9
cOvsy8eXwXJGBtvLpYlVZdz2JjmNggQFaaq/p0TO9XA2BrtzTha9qlRYJMtQ
qb7JzIjr6JBn5kX9oromEgWmctzKh8j1sxlhJHuOgpLcz7igugxYAZldDVGD
J4BgHhDCA+yIgBkBsEADe3Us9NVfbDavNkZOl3kfb0P3NEV9+8tpeXO6qE28
8uhUEBNV3FfILU2l8xKqmvKLqzmyUtY/NdnRnE8k+LQ0cZ0cAE4qksdGd3dI
jh2r6ewRaOoBJy+0HDAEavvS6GI/niKyZT4nVgAX1CdceH9s5EpLyaq87XLN
S9XFtSu1J5eld0/kfn5a8nqB9d1GxvNjCRfG8dMDmI2t7P6V9PRG9Njdmjeq
7dLZdGFXQk47ve1YcXEbxwGmdexUB57s0dQhMrUEEpIQYWHOYhEdGQptaynD
RvnA/a0PHAR09XfAfK28vIzr67Ib6rPq6zklCqpEhqttTmvrFa2c7spXJMcl
BolzWM2NJXRalLHRXtAujmgBJsafTgMOD3drapFDfS1BTgkIciqpEICDq2yW
23rqwNC2iWyMmeOBwYlGXnbCv1Vf4GP9I/G+to5HxLl0F3dd0CHLajI8YHpN
TdwzM2VzTRlt4siiBDcFxbVPiM4K1e3mBq4qGbeO5g/JifG+WtXZ+IZ8qpwX
SSG4CziEvFzwb4F4eZiA8gDbt562Gti7BXwaWDsVCrGPl00A3GFirHWgt/rn
H1/BYTbNTQWgPIKCXUH3u3Rl/cWrO1dunPn9z2+QaNjY0fbCoiwXZ0M3F8PG
mtyZyXZKPAriagbudAYBJKa797Z27QAwaF80EgpxNgHfy8JUA3yjB3e3sBF+
cB9bTBjkh2/uSoQUMEnOT7VbmuzbtwuQZjOvXVwDn1aYyyHiED989eyr9w+s
TDRmZ5vA0b/+tJ+VDolPtGjtIsvLkPXtqRimC7YcfvGvZQO3Xfi8bOTp50D+
qnr6sm78DHAgQd0sad8hD41dwPZiflex89oYpqzI+vytkpd/rfmwHXpu95Wt
NNWfaB/e7ijuy6Jwo0msKBovkpNL/qcmoW76k2PK3JwYDNqivoZjqAf8/PO9
XbuBL7+7ZOMM3Hk6A+wHcipiuEURKXI0v4o0erahZIDftlx29YdTaR30lc8m
PlNtjy9IL63nPVkXf3U6+8u11HeLCfdmyG+vVq3M52YVEapmS+oudZCakoQj
yV+qbuUOMGLFfjXjYkpWEI7umSpES0vj55bqz5wftLJWYzIx7JRoc5ODgqwk
ChUZinIKCLBJTo7IYBNicN6tjTnNTcLl1WZBDjYuycsTfjivOIGcBAtF2UXi
PKNwMDB9jYw2C4RJIcEuxNhAS4sD1pYa/0e+QYGOOWKGobH6Ed2drV3lpCSU
rrmatDQlOMLFw8+8ulkK8TS+fGP13Rd3weCdKU7wgpv6IEzSsjHVrRmlDcyz
ZxqGSolFBNvKWOfmRGgbzWckI7iV4j6YGiALNJjLI92dKS9IgsZAD7fIKVXZ
MUWZMVJ+TAYrkhztFwi3xqI8MWFuR4fqHa21nz24KOInkfCBEgFjeqzNxU7v
1x9fgXkS1O27NzdfvbzuAjG2tDry5t297SsbF6+cHD3a6epudWl7LQobANpg
V7tibrI9AukBPl9ZLcVE+H7346tTZ2c3LxwHdgEHNQEszj9bkJgnTQG7fG21
5D/fQe11ddHPlVKzMgkD/aWgbzcoxYY6wAF1QFHAV/3769dPr1NJ6Pqq3A+v
b4MHVlEsePrs1OlLjbLyUEK8cVklrqOdMTiYObFQiU33Ds5xvKFajkhzBtz0
XCfXdAfuW5U/A/x6AXMxoE0G9gUc0TW7ck7ZWedZXmo1OIf/XLWcUO1Haghp
udkwdH+uc2tIUEdn5WJjGGhzZ30Lp0NX7q3/U5NgzHj35jyIDG/enIXB9XkC
bH5xUijaEhZocO7ycFOvOIYGzcjFhye4RdC9hLX0sgFx7WTBsVujN/91rnwm
Z/ZG25t/bU5Nil5eqbw9S3+zlvzmBPXJesyHOyWJZDgAju4Ru8MkTtzqafrJ
GVgWYvFB+9Uv5lAsh6JOeizHK54DjWW6KRqYbj4HVarXev+5CiAC6a4FFoIg
iZqEPKAJGOoDl89PdzXlYUMdW+pEJCI0Au96/spkNBUG1kt+UfLzZ2eFnFhv
F/1sAZVCC6+qkyamRJnbHCxU8MQSRjIzytJkb1I8sqO5CBzEOFIoX0AnkJFo
PPzn396C/R18jq4hgI+Fe8HNpxe6KuolBlb7yEwUsBdgZKGGF4sy5IE33w49
e9qd4g3MpfoOEFyPs5DDJJ8TfPxRMuwUDz9NDatGu8xWJp+fKiF47o903NuW
Q8ujR+SwImkxvu42GtFoSFSQY3leCjsxvDI/fXW+V5qVmJIU6eNmDrriULfS
z8sa7Jj+3lbtDfn/+vYZ2NDLFeJzm8ebWsq3Lq49fnqdzoz95tuXebkZHHbc
vZsbIO6Z6u2qr5YoK8Wggfyp+vLCzRVBHvP/1lD2gJqIJNTYGGhHS257cw46
1NbTVcsHqnf6TJ8H9LA8PwEMBuc3j/rBLMGI3lQru3v9FOiQf/78vrIke/vC
Eijgn354ef/B0vQxkSjPSyQLcPdVU1SnltZm59eIEYnwKBmiaJkz+7od8ARM
xEyfpkn/yqsApBRw4AHO6YBZAlVU09OXWV3pISq2/qiaGr+nOBgKlK4lt18p
7r0yVjpcFxsfDIYHAi6EQEB5etm+fnPrn5rcWGnv68x1cdy/eW7YxAK4cHUc
G+uaX0qjMgP2HwE+//Z6upjgHmiEJLsrOrMjWH6K/pz6WcXw+c7N9ysjVxsm
Ljf+oHrY3ppyZYb3fj39/SL5yfGYF/dySiuxwC6NHYYRB3xlgAFlv3QCu3Se
3MgPSrZ5rdqStMaLamO8Iw6nSYPFpXhJUQw50fPsuQGV6p0HRMfZ9pCbgx47
GecXYGNlu9/ZXtPBYh/MRa8sl9FSKyQRfQPDbBX1mcdOD+YUJ+fIaCUFKQsj
jRTcp3/hgZ23sjZn9cy4qe1BVKT3Pg0gHO3JokWO9NbOHm3XPQQqfK+hyQFZ
cWZXX21DYyEm3MvRQaeohOvirh+B8xblMs9fXUwTkJ28DVmZUUSW79HlQnEl
8v3vx69sF46JvNrCtR+VU0dxTn1YxyUOcpyFGGEGzqZHDiSjihOgjzY6KjjI
QMtdmXg4K9y7qSAVG2DFo4U5mey8uDpYLqG7WOxvV4oHWotVf37uAzFR5GU8
ub0pF7J+/f51TZkwJ5P66O6Zbz4+AGunsb4IxO0btzbBMLlnHyDJ5fz5768R
AU4ELFz1xwe5mFlZzE+KDzt0EJDKU/6t+rJrokZald4+XlnWIqxuFvUMFivK
Uo8fa7544Wh1NRuJtPr9j8dt3UIHN/UiBW3XHuDkRt++PUBrgyzY314uYYGY
A2pSJmaCmPOfs0q+FItjklOd23soKNyRFD5iZK42TymI45GCGQiPJBuiEjH8
uiqmAwVYAEFlUmLrqmNG764InjmrGKsYz2rtK1TG01hH7n1of/DzlBfTOKIQ
2nhOUHdCNnJlvmGsKwzhlsdP2vNpCdrf0pIpq8sT/9Sk6u+XH99ulRcnp7HC
OFzM2kYXeMDf/3QnN58izCVm58atnx/EUrwdYNpWvoeVI3KqFF81Xlg/V77+
evbG36dSW2Jf/nH/2rWJxyv5H2ZoT9u8XxwjXnzQARwCgP1eh6z5gE4G4Fp2
iH/Cv/+8bKldCwbc+/VEYR8zrRTtR9BjiRGZeeGj00V6BkBrq3Dz9BBIhVam
e47850QaG7vDYJiEOBw5sh8gRXghPE02N0bNzXcvb/QBe4C1i2OljVmgMxQU
MDuaZBOD1eo7gAB/O0V5VnVNDjLcM0tIpzNwJGLI3p2fplGlxCJlErahgbqb
p7mzuwkjNfrJ08vjk61a2gCXT2ZzY7x8zSJwPnXNcmVDrounQYYAn5Tqn5GN
YPHdVKpLM2P0u1O8BaHPNNtxlu08xrDrYDkUptjV5QUNKaIViZ5ZYdYn2+Vb
M60QUzViiCMBYdtUks5JDDkIAD11IhmfpH8AWJpoNtIEvn5zQ8IlezoaNFTk
qP7+pr5cvDI/kM2jpCRjv//uKZPxadn63r66py+uszOooCaBnSCsYcDIt1sd
MDXZ++6zG8mMyEiMx+RkExIDGZ5uhKHs1fVB8DXgldKsfLR3HQFgYZYxFN/4
pAAXt8NRBNeltY7WbsnIpCJbFnN8rRWM7qOjVZEYt19/fH725HhkmEdHY2Fz
jSzA1wZMBe/f3lSpvhYJiawUeEEJHoU1/E11O4mDaJ8opknxbjHmxEL/+Hp4
fLtn830xgAKAUE1INiO2s4XQqcS1FJPq5VE5sWFknaFZ1neqi3HZCBQPJuhJ
G7vRGpwGz6pT2EI9wQTS2ybHIGHffvuOnhQdgPiv88x//OKqSvXq3z8/PrQf
UCrTo7BOhGjXt+/O+/kbBgSbIsIsW/ryBPnx4jJ6bl2adYBOQVe2LlSjoE88
fKX9/E9zTZvFPWc7/qV6stKffKc/4uOgz4/bvORKKnBEH7CMV9PL0LYpgJDn
IZWPIQ3r8R15Bii156qLpUfTuZVRgUTjyrbkho70phaup6cGmej58O6KSvWB
m0Yg4GBxpGA3D5N0DhHMPKCoQn2ts1JwYwOVFhbqRpY7/TD2WhZAFBXe0J0r
kMa5ehxRqd57uRogg5zdXQ1//eXN99+9ADHBy8OKz00sKcxCh3mDcDE23BLg
7wiikIW1JjkBiY7wycpONDJRx+JhzhDd0aP1YSg3cBeKaWiMe2ISorCYGhSq
LZGHfv/zyuxI4t2xhPuDxHuzyS1Cl0a+d3cxvqQIV1BJyi7EyHLC8+Kg2WjI
+/ursTg3uLdeUhyMHguLDnVIiPJoKecGe5vUl3KCvc2EaQR7k733r6xYGOxW
lgj++unt1smp1roCfjqJTAm9cmNZWS91dNHPL+LVNxV3dte2dypt7Q3vP9gO
CnYHNZmRHnvt2hIEohtDgkP9TCA++nR+lKX7oSCiqwlUc58VEJzg6RpqGscO
ZWZFyStSXGF6hVVpF2/NEWl+6UIsWMukRHg41qWqRnDhwuyNa6tFeWkleenX
Lizy04igcT2+dxY0yaX5LhYzXCiMkxclpnADT11pi6B+Wt6XWxHtE29GLPKN
KHRKaIdWbqeMf2zYj9+hl2iljjUyTnbWT7RyZTtCGaaNM/TfVZcy5JFuKPPy
IXntTHnxiBxG9hNVV8gry0srMz777FyWgLZ2Yr6sQkZOwPxTk8/uLj29v6xS
vVk93jw9UWlnp1ZXx62sTO3slOQXUCOjXWmpoT1jipahQoYYjyC75TRx6+cq
A+m+07f6Vl51zj9podVSt94e//n3hZlmz9ej7q/P0PAKOmBgp+6WpmbCtoSV
Q9MWLAvPODfMBCkYWsid579dELRTRI1xTAmiZYCfxkOMjOZDHNUrSpiVpakb
a30/fv8kLZWAxcNDkW7p7FhnB10wO430VO3fCUyNNVjbHfD0N4Fj7A2d1Pkl
iYPHa6EoC11LoL5FtLrca2G8G4fxHhup/+zNLdASI6P8HRyNAwPcggM96Em4
X3/+EBTgvEcdEGQlgNr78adXt+6eBk0pgxvr7WO2fz9wbKGno71EWS2OiYHj
sO4cDioj3T88XPvPf587N5d8UWn/xRJhdpY8sCa19dY9pK9x8JAGOMq6eEjF
YlV5Ng5lDnz+YrajJ8PWZRczOYRG9nO12ttWnQ2H6Fblp/AY4fYm6qqfX8WG
ewlSox0tNf/48dXKbO837+79+u2LkAAHSR7zs69uA2qAIIcuzWPfvHNu8/wy
KS58z95PX54PDzUkJYY3t+YHBNkggq1NLHfAQs1RJAgEoWfjo2nrr+MUZnzI
aYc1Qg+Kt0cQIcycGPcQ89AYdyOHPfW98kwZxd7zsD/KOo2PC49yd3bVBrWn
rBKlMbGl8nTQGHUOAvhw78/fXPv42VVkoF11pRAb6f/gyXliovfsyQpqlltc
FiQx1y+C54riOxMKvcPybMMVDukTEau/9vJmKTrxe2zS9e3TtSOK7Mbv5p9+
3cCpDCOxA2JYofVDitKugpqx2mQZu22oDxMb3tAlGZxWJKUSzl484exmWVYl
/acmpZn429uTqr9e3royBSrz2cNVP6huBNp2arwiMtJBnEvWNQYGp6pwibA7
n50ZOtFSN6lApSCGznVntbAY5SG3fltceDOOlfl/rVp/9lA+U6p7fpZcdKYP
8AoEwrIAp3TAX24vmtWTz3p3TgMBejE16JNfTfPbyKEM2/phfqY0PJ7qNj1e
anAEWJlvDvIzZbPC798/2TdQSWNEcHkJmgeBYITL6EBtGh0LVjFY1zvVAHkZ
+4glYOF9iCklwKPt7AOPhFEg7kEGP/3+xMNDNyUlyg9u8+jh+TCkJ+gtzhBz
RycTFBqGQvv09lSnsQjGejsJEV7mRmpdnQqZPPXkiTFj412FhWn6up8mEPv+
2ydQL7Mr28ckORQuF0OOh2jrAr/+sbl5LONKq8e1o8jF2zWAOQBo7gEMbHYd
tt5l5giYaCX2lta2i3ycgLv3mhdP52Mozn4oa/WdwGSfIpUSTMK4FwoTuhok
+wFgoLXw92+fgncSYgJVv74b7VH+8cPrL17f8oNaNrTJi6t54QRfGMKel5W4
tDz23TevY6PDhvubO1rLHe20y0q5dXWi4BCrgGBzd58j6SIMSxCWxA9K5Aeb
eat7RphSxREICiS1mGzopSGqYbuEmjkijH5TffQLdwwn+SSyMepaQEikGzYW
Bobnf/34gs+N2zozXSBh8dNiwwIcVX+8a62XCDgxOVlkblpMeLj/5esbhVWs
4npqUQuRLIBQpfBghk12ayJW4h8mcEfLPGCZptFVXuI58sTb+q57xT23C06+
r5u6k5c3QgxMseCWENpHizcuTZbU5WSVZjUM1k/MD5RVC6UV9IF55eKZSUVN
PjzU40/VD//UZEUBbXKw5K+fHty4cPTe1RlQlli0nY+H1vXtqWCEmTw/cb8m
ML/ShiK6I/AuVf15LbPKx7/cDWb6T90Ynr/fK+qjNZ4tlY6lJJb4/Vu1+fBc
Tm1NZNpsHWJ2HEiWAnHyXaXH95UtmtQtmuaXAeEmLbdqcmc4sQWIILrty+/P
DI7L6QzfsQG5h8Oe45O1RtpANNajq6vo5t0TAcGOWZmJ7BQSKshjzw5AwEn4
tI7Mx3tg3IUj7aw8Dtv664YzYV7RVpgMXwMfNfuQI6RUBInuT2YE7zsEXLp6
HKx9c6tD2vrqkbgATS0ABrcHo1q+lAUS+mBroav1QQoxCI/1bWnKt7fVPKwJ
0BJDBZlkMNS9eX0tHO3R2VMcG+cTGmHh5b9/br3k6bPu9iLXcxu5eTNNgKGR
mmcoYAEF9hnstHIDDpq5pLAr13v1EWpnrxdu3VQg6a52gWZksp+UTyRGuNeX
cXsa87TUgc46aZCvBWhQESEu+oeAqmL+j18+Am9Vf329fzfw4Mm5KJJvEBIy
NtESTUBEhsPAMAlzt12dHcrLTtY9CFzZmmEmBSFDLJhMv1R2YPewqKWP29DF
DsGZ4qguLDGamhmsYQ3c+HCqpFdEEUXtNAKGl9tqewqzC5ONbA6ws+PDcN7G
1gea2ov2aoDoPYtBe3x8e4ubijfSAVS/v/v4+kpDpSDU3zI5MQSPhWKi/Bo6
ilMEEUZOAFXg7UfSh5NMMWnQnLbMwsECFAdFK6cQ5CisDBFTHEgo8uN2UeVj
afndCRlVSLckw7RG3NGzRcIidHOXQCCmiIt5yGhYQxMP5NniRm56Ac0j0On+
q5s17eW83JT/Ypw/niVEexwfr/7+/TYozmJp/MRw6cfPzmdzsKnJoWGh1hn8
qJZuWWE128FXj5ASrG4GKMdKV+4tzN+cKu7PLZuSzz4f6bhRB0mxLT2a8dtv
54cmJfTWtKTjTejZQcjwsHn/lPf0sketEvCzRteSOh40EirDQjLdkSyXpYvt
rz8/TSG7D3VK3WzU12abHK3UY/FeDg6a3//0bO442EbLDuwFYqIQJHxwRJjX
kUNAV2eZm5eJh7+FvY/uQWsgMME1PAMeXxQBZzm5kcwMvNXs/A/Do6zRJHcS
PeDmg1WBmHpIG0hJj0ZHetnaa4FcUFHMSSTAEyI8SWFuGbSo/o4yOiUU4WsO
InlOdnwmj+RgfyQ1hXBhexHqbzm13CYsSQghWkcy7CcXJTKO3dJqlWRjCdB3
BGyRgJYL4OoLOHsBhp7eouLSjaMHfIBT12Qffz4KGAEh9KCgMAepIC5PQFbI
GGlUZHtNDhSitzrfubE0EE/wc7XTVsjTS2Rpsmwa2MFJBP8qpbC5XQ7zs2ls
yJud6trePB6N9oO5WMwOtdCig6CO2n1NUgEb1axMzcuJLCrA9vVlcPjQYgUO
SzDqG8pipPvAUbrZpaSfVS9w7AA0AxafGXHj5Rl+Hi0qLgCF8/EJtPcNceQI
k/5WfaNrsIvLifvtlzdggMSEurQ1yLbPTo72lo/2KSLCHIP9LF4+3wpFQ6Sl
KWADwtLcETEmeLZnghiJZQelKVJJ2QnxOfQ4cWJMdnSsKCq1mpKmTMBlo7Mb
0+K5CHJWgHSYV35M2DSd3NRHrW9kFhbQAkKcsbE+q8vlYN9RtAqBfcDLbx6/
/uaJX7gXLvG/5gv6+7fH64stL+6vNFamS/hR08Mldy5PqX5/0lKbVVuZ0Vyf
DYMbLa51Ty+17dMDWsfKs8pSq4dKdNw0laPVXdM9t7560HKuu/3+YNGVZi8R
omxA/M2vFzuHqTnlcGouIqGcjC6LN0+wsw7fwVT4TL3pwiqRkaXBhPxAHA9K
Yvv0j8k72rJGe/IO7wZ6m3KcLdUlQvKuXQCYwEHiUKm+szQ+aKi3xx1iRsAi
tA4DP/zr5UEtIJ6J8kXbU7MjHVCGCJZbVneKH9+DVI5hKglxslBeFam4nU1O
gbGzwkvKk5X1/NR0TDTRu6CQDocavby/UZydwCOHkENcgz3MSnNS6DGBs8O1
B3cC0mwKOsQ5nR0TFArpGlLGMlA1/YXl/ZI4UaiRv9qfqusEF6C6mJJxfn2P
sBg4AgUsEWY5QoBGBPDx9KX1VIXUAaK2dbXg5HU5eFRB9KAIAjQ8xDGRGIBH
u+WLk8AdCjFoq8ttqZHkCqhWRrvPro3UKARwDzNOMt7LxTCLHxcT4+sLtdg+
P49FQX/99lW7Mt/J5NCHh5d4VHR7Bb+tLI1Ph8szQ3rqaOdXFbe363IFHkvT
go560o8fl5xsgMxM/4r6pJ7pQt8I8yRhZFoeub6v0NxRk5KEcvUwCcfCrJx0
B0dbSitF1nZaTY35f/7+rrOlaM+nc92/vHphlhwNy5fQNNSBxDj/O3eXeKLo
YKyDjZeGW5ABQxhh46edVcVk5iWU9ylSCth2QS7OSA8ULVzfTZcsIHAUqZJ6
SXY5r22kNFuR1LisLB4XJokhEF9AJg3jZ4QVlXC7eksGu7jtbezweMT5R5fK
Wor7plsz81P1bA78U5Mf3mz++5eHx2dqwfZdUZDIYQY9vnVsfaHp1ErX7z89
ZCQGtjSLM7OJ+YqUruFyZIxXIN6DkRNX3lukHKqMBctFmZMzVDD/xYnuz+bE
a5WB3PDaYdGPvwwfOxZd1RDCzHGL5NqzK/0nN5Kvv1fmTtO8Bc5IGSy+BG0W
sLd/vvTCtZGudhEYGDztD4Am4As5Ul6UGhJsg8I4V1dnN9blNdUU7N4JKEqE
EGeTXTuA2blec6uDaVxiYBQEGmFjF6bPrCT68zxYPYm+AlfR0ZSxm41NCznV
g+ltw/zWzrTxo7nVVYninMjGpozW1kx+evhwV/6VE0PkEBeInlpabEi5OFkp
Y7eUZUUgbNPoyIgw5107gcWVIW+EAwLnNbjWmVHJZJaTqQrcwmZFLd/Z0x6I
H66OPrbgxs4HfCNMahV76wtc58aDups8glz9PPZeeVTDr4KVD4shSHt8LBx0
YM29QFUpp0jKsDHZbaz9afTRgY5Vxdy6cgE1FoFFesRG+mrtA0B9vn1xER/p
ERbotDjTNT/Rfnt73cfJpKlMrJSnh3kZTXTIaFG2MYHa62Oix1t152aFxwcZ
Sqn3SD3+1onC11ebV0cyu+qoSVRHkTwqv4Zx69V6TW9u/2SNpg4QFenDTiPa
OxkWlmYXlAiotMjyCnFaavTR0QZrs/2Fuclfvb/1+7+eCXlEkG6y+UQKyf/p
s1NB4RbeIXrugUZ9MzU+4fYUHu76m3ONExU0SVwA0QeVFOqEsE/PSyFnRKfJ
kgoaxebuZoFRvsXKdFSca8uxuryurONbyu7BlJWF4jOrLTIJK4Mdc3A3sLpY
f/rqOoIQom+nTWSE4xJC8ioygf9t/9v+t/1v+9/2/7H9P1Pc/5c=
    "], {{0, 159}, {220, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> ColorProfileData[CompressedData["
1:eJydlndcFNcWx+/MbC+0XZYiZem9twVEehOQXkVh2V1gKQsuuxTFhogKRBQR
EWwgQQEDRkORWBHFQkCw14AEASUGo9hQyax8PokvL++9vPz+uJ/vnHvOnXvP
OXc+o5GQEZIIAwCyCOgQws5xFQrZeaEy6EO4IIufJOBxfQUiXhJPyEqAUKMP
BR0AxcefL8iAUa90gUgY4u3GjIqOYeL7AQyIAAcsAGBzsjIDQr3CJN6+nu7M
LNQJ/Ite3wKSBcF1E58gJhP8f5LlZApFAEBBKFtxeVkclAtRTssRZUrs0yjT
E1IlDGMkLEQ3iLKihJPm2fizzzy7SJibLuCiLNlzJjedK+EelDdni3koI/4o
F2XzeTko30BZO02czkf5rSQ2ncfOAgAjyY62iMdJRtlckihhWIg7ygsBIFCS
vuCEL1jEyxVJDuWekZkn5Ccli5j6HAOmhb09i+nDy0njiUQmQWxOKlvIZbpn
pGeyBXkAzJ/5s+QkuWWiSba1sLe1NbE0tfgiUf918m9KUtt5ehn8uWYQo+8P
21/5ZdQBwJpBc7PtD1vCbgA6NgKgeO8Pm/YBAKTRurUPfHEehqRfkkWiTAcz
s5ycHFM+j2MqSejv+p8Of0NfvM9Ustzv6WF68BLZ4jQRU5I3TkZahljIzMpk
c3hMkz838T8O/Ot9GIfwEnlCngCNiEC7jC9IQsst4PJF/AwBky/4T0X8h2F/
0nxfo6LVfwL0OFMgM0AHyM99AEMjAyR2HzoD/V43f2IEkNy8SPXx+b7/LOjf
V4XLJAP6Gfkc5x4SxuSIhdnzc5JrCbCABKQBHSgBNaAF9IEJsAR2wBG4AE+w
GASCMBANlgMOSAbpQAhyQD5YD4pACdgGdoJqsB/Ug0bQAo6BDnASnAMXwVVw
DdwE98EwGAPPwDR4DWYhCMJDVIgGKUHqkA5kBFlCLGgR5An5QyFQNBQPJUEC
SAzlQxugEqgcqoZqoUboW+gEdA66DA1Cd6ERaBL6FXoPIzAFpsOqsC5sBrNg
V9gPDoOXwUnwCnglXAhvhavgOvgI3A6fg6/CN+Fh+Bk8gwCEjDAQDcQEYSHu
SCASgyQiQmQNUoxUInVIC9KF9CLXkWFkCnmHwWFoGCbGBOOI8cGEYziYFZg1
mFJMNeYwph3Tg7mOGcFMYz5hqVgVrBHWAeuLjcImYXOwRdhKbAO2DXsBexM7
hn2Nw+EYOD2cHc4HF41Lwa3CleL24lpxZ3GDuFHcDB6PV8Ib4Z3wgXg2XoQv
wu/GH8GfwQ/hx/BvCWSCOsGS4EWIIQgIBYRKQhPhNGGIME6YJcoQdYgOxEAi
l5hHLCPWE7uIA8Qx4ixJlqRHciKFkVJI60lVpBbSBdID0ksymaxJticHk/nk
deQq8lHyJfII+R1FjmJIcafEUsSUrZRDlLOUu5SXVCpVl+pCjaGKqFupjdTz
1EfUt1I0KVMpXymu1FqpGql2qSGp59JEaR1pV+nl0iulK6WPSw9IT8kQZXRl
3GXYMmtkamROyNyWmZGlyVrIBsqmy5bKNslelp2Qw8vpynnKceUK5Q7KnZcb
pSE0LZo7jUPbQKunXaCN0XF0PbovPYVeQv+G3k+flpeTt5aPkM+Vr5E/JT/M
QBi6DF9GGqOMcYxxi/FeQVXBVYGnsEWhRWFI4Y3iAkUXRZ5isWKr4k3F90pM
JU+lVKXtSh1KD5UxyobKwco5yvuULyhPLaAvcFzAWVC84NiCeyqwiqFKiMoq
lYMqfSozqmqq3qqZqrtVz6tOqTHUXNRS1CrUTqtNqtPUF6nz1SvUz6g/Zcoz
XZlpzCpmD3NaQ0XDR0OsUavRrzGrqacZrlmg2ar5UIukxdJK1KrQ6taa1lbX
DtDO127WvqdD1GHpJOvs0unVeaOrpxupu0m3Q3dCT1HPV2+lXrPeA32qvrP+
Cv06/RsGOAOWQarBXoNrhrChjWGyYY3hgBFsZGvEN9prNGiMNbY3FhjXGd82
oZi4mmSbNJuMmDJM/U0LTDtMn5tpm8WYbTfrNftkbmOeZl5vft9CzmKxRYFF
l8WvloaWHMsayxtWVCsvq7VWnVYvrI2sedb7rO/Y0GwCbDbZdNt8tLWzFdq2
2E7aadvF2+2xu82is4JYpaxL9lh7N/u19ift3znYOogcjjn84mjimOrY5Dix
UG8hb2H9wlEnTSe2U63T8CLmovhFBxYNO2s4s53rnB+7aLlwXRpcxl0NXFNc
j7g+dzN3E7q1ub1xd3Bf7X7WA/Hw9ij26PeU8wz3rPZ85KXpleTV7DXtbeO9
yvusD9bHz2e7z21fVV+Ob6Pv9GK7xasX9/hR/EL9qv0e+xv6C/27AuCAxQE7
Ah4s0VkiWNIRCAJ9A3cEPgzSC1oR9H0wLjgouCb4SYhFSH5IbygtNC60KfR1
mFtYWdj9cP1wcXh3hHREbERjxJtIj8jyyOEos6jVUVejlaP50Z0x+JiImIaY
maWeS3cuHYu1iS2KvbVMb1nussvLlZenLT8VJx3Hjjsej42PjG+K/8AOZNex
ZxJ8E/YkTHPcObs4z7gu3AruJM+JV84bT3RKLE+cSHJK2pE0meycXJk8xXfn
V/NfpPik7E95kxqYeih1Li0yrTWdkB6ffkIgJ0gV9GSoZeRmDGYaZRZlDq9w
WLFzxbTQT9iQBWUty+oU0dGfqT6xvnijeCR7UXZN9tuciJzjubK5gty+PMO8
LXnjK71Wfr0Ks4qzqjtfI399/shq19W1a6A1CWu612qtLVw7ts573eH1pPWp
638oMC8oL3i1IXJDV6Fq4brC0Y3eG5uLpIqERbc3OW7avxmzmb+5f4vVlt1b
PhVzi6+UmJdUlnwo5ZRe+criq6qv5rYmbu0vsy3btw23TbDt1nbn7YfLZctX
lo/uCNjRXsGsKK54tTNu5+VK68r9u0i7xLuGq/yrOndr7962+0N1cvXNGrea
1j0qe7bsebOXu3don8u+lv2q+0v2vz/AP3Cn1ru2vU63rvIg7mD2wSf1EfW9
X7O+bmxQbihp+HhIcGj4cMjhnka7xsYmlaayZrhZ3Dx5JPbItW88vulsMWmp
bWW0lhwFR8VHn34b/+2tY37Huo+zjrd8p/PdnjZaW3E71J7XPt2R3DHcGd05
eGLxie4ux662702/P3RS42TNKflTZadJpwtPz51ZeWbmbObZqXNJ50a747rv
n486f6MnuKf/gt+FSxe9Lp7vde09c8np0snLDpdPXGFd6bhqe7W9z6av7Qeb
H9r6bfvbB+wGOq/ZX+saXDh4esh56Nx1j+sXb/jeuHpzyc3BW+G37tyOvT18
h3tn4m7a3Rf3su/N3l/3APug+KHMw8pHKo/qfjT4sXXYdvjUiMdI3+PQx/dH
OaPPfsr66cNY4RPqk8px9fHGCcuJk5Nek9eeLn069izz2exU0c+yP+95rv/8
u19cfumbjpoeeyF8Mfdr6Uull4deWb/qngmaefQ6/fXsm+K3Sm8Pv2O9630f
+X58NucD/kPVR4OPXZ/8Pj2YS5+b+w0AsgC3
      "], "RGB", "XYZ"], Interleaving -> True, MetaInformation -> 
    Association[
     "Exif" -> Association[
       "NewSubfileType" -> "Primary image", "ImageWidth" -> 220, 
        "ImageLength" -> 159, "BitsPerSample" -> {8, 8, 8}, "Compression" -> 
        "Uncompressed", "PhotometricInterpretation" -> "RGB", "StripOffsets" -> 
        33752, "SamplesPerPixel" -> 3, "RowsPerStrip" -> 159, 
        "StripByteCounts" -> 104940, "XResolution" -> 72, "YResolution" -> 72,
         "PlanarConfiguration" -> 1, "ResolutionUnit" -> "inch", "Software" -> 
        "Adobe Photoshop CS Macintosh", "DateTime" -> 
        DateObject[{2006, 9, 1, 14, 35, 34.}, "Instant", "Gregorian", -4.], 
        "ColorSpace" -> "RGBColor", "PixelXDimension" -> 220, 
        "PixelYDimension" -> 159], "IPTC" -> 
      Association["Application2" -> Association["RecordVersion" -> 2]], "XMP" -> 
      Association[
       "DublinCoreSchema" -> Association["Format" -> "image/tiff"], 
        "BasicSchema" -> 
        Association[
         "CreateDate" -> 
          DateObject[{2006, 9, 1, 14, 35, 34.}, "Instant", "Gregorian", -4.], 
          "CreatorTool" -> "Adobe Photoshop CS Macintosh", "MetadataDate" -> 
          DateObject[{2006, 9, 1, 14, 35, 34.}, "Instant", "Gregorian", -4.], 
          "ModifyDate" -> 
          DateObject[{2006, 9, 1, 14, 35, 34.}, "Instant", "Gregorian", -4.]],
         "MediaManagementSchema" -> 
        Association[
         "DerivedFrom" -> 
          Association[
           "DerivedFrom" -> 
            Association[
             "InstanceID" -> "uuid:ce6929f9-3b55-11db-9b86-a49f814e6278", 
              "DocumentID" -> 
              "adobe:docid:photoshop:ce6929f8-3b55-11db-9b86-a49f814e6278"]], 
          "DocumentID" -> 
          "adobe:docid:photoshop:6bd7311b-3b59-11db-9b86-a49f814e6278", 
          "InstanceID" -> "uuid:6bd7311c-3b59-11db-9b86-a49f814e6278"], 
        "RightsManagementSchema" -> 
        Association[
         "DerivedFrom" -> 
          Association[
           "DerivedFrom" -> 
            Association[
             "InstanceID" -> "uuid:ce6929f9-3b55-11db-9b86-a49f814e6278", 
              "DocumentID" -> 
              "adobe:docid:photoshop:ce6929f8-3b55-11db-9b86-a49f814e6278"]]],
         "PagedTextSchema" -> 
        Association[
         "DerivedFrom" -> 
          Association[
           "DerivedFrom" -> 
            Association[
             "InstanceID" -> "uuid:ce6929f9-3b55-11db-9b86-a49f814e6278", 
              "DocumentID" -> 
              "adobe:docid:photoshop:ce6929f8-3b55-11db-9b86-a49f814e6278"]]]]\
]],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{220, 159},
  PlotRange->{{0, 220}, {0, 159}}]], "Output",
 CellChangeTimes->{
  3.707479413617574*^9},ExpressionUUID->"47ba0a30-a0d4-4797-83d7-\
ea9886c90859"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"enc", " ", "@", " ", "im"}], ";", "    ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "it", " ", "really", " ", "just", " ", "performs", " ", "the", " ", 
    "below", " ", "operation"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7074793636961455`*^9, 3.707479367865195*^9}, {
  3.7074794002720623`*^9, 3.707479415388281*^9}, {3.707479462030778*^9, 
  3.707479470267274*^9}},ExpressionUUID->"4bb6b572-3bd9-42b8-b7c8-\
9a1674eb04a3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ImageData", "[", " ", 
   RowBox[{
    RowBox[{"ImageResize", "[", " ", 
     RowBox[{"im", ",", " ", 
      RowBox[{"{", 
       RowBox[{"28", ",", " ", "28"}], "}"}]}], "]"}], ",", " ", 
    RowBox[{"Interleaving", "\[Rule]", "False"}]}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.707479428190586*^9, 
  3.70747948994359*^9}},ExpressionUUID->"78157b43-a88f-4d26-be5d-\
8993910f54f5"],

Cell["\<\
You can make an encoder class and feed it some objects. When you pass objects \
to layers, they\[CloseCurlyQuote]ll automatically get encoded to tensors by \
the encoder class.\
\>", "Text",
 CellChangeTimes->{{3.7074795139181204`*^9, 
  3.7074795334839964`*^9}},ExpressionUUID->"d763adb7-9674-4a1e-819c-\
e52c89403c68"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Net Surgery", "Section",
 CellChangeTimes->{{3.7074795423053465`*^9, 
  3.7074795441505117`*^9}},ExpressionUUID->"c98fca54-fc5c-43fd-88da-\
c9a1ba98b9c8"],

Cell["Can grab a subset of the network (a net chain)", "Text",
 CellChangeTimes->{{3.707479676202177*^9, 
  3.707479684359172*^9}},ExpressionUUID->"067b0709-4fec-4f37-b3ce-\
22e061af6984"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"slice", " ", "=", " ", 
  RowBox[{"Take", "[", 
   RowBox[{"net3", ",", " ", "2"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7074795457181263`*^9, 3.7074795465650997`*^9}, {
  3.7074796599961147`*^9, 
  3.7074796701861296`*^9}},ExpressionUUID->"a4b34d99-2749-4248-93ba-\
30f203842857"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Graph", "Inputs" -> 
             Association["Input1" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]], "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                   "$Dimensions" -> 
                   NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                 Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> 
                   NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                   "$Dimensions" -> 
                   NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                 Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input1"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input2"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                 NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]}], 
           "2" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], "$Dimensions" -> 
               NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input1"] -> 
           NeuralNetworks`NetPath["Inputs", "Input1"], 
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input2"] -> 
           NeuralNetworks`NetPath["Inputs", "Input2"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input1" -> NeuralNetworks`TensorT[
             NeuralNetworks`ListT[
             NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
             NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[
             NeuralNetworks`ListT[
             NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
             NeuralNetworks`RealT]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`TensorT[
             NeuralNetworks`ListT[
             NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
             NeuralNetworks`RealT]]], NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input1\"", 
                   Annotation[#, {"Inputs", "Input1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", 
                   Annotation[#, {"Inputs", "Input1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input2\"", 
                   Annotation[#, {"Inputs", "Input2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", 
                   Annotation[#, {"Inputs", "Input2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    RowBox[{"1", "+", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False]}], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{150., {38., 43.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.707479670501876*^9},ExpressionUUID->"3797f261-e849-4e69-965a-\
a1165a6c980b"]
}, Open  ]],

Cell["and stick it into other networjs.", "Text",
 CellChangeTimes->{{3.707479690936037*^9, 
  3.7074797075055623`*^9}},ExpressionUUID->"10f9b0b5-8152-4e43-8d8b-\
810b91246602"],

Cell[BoxData[
 RowBox[{"NetExtract", " ", 
  RowBox[{"(*", " ", 
   RowBox[{"get", " ", "a", " ", "particular", " ", "layer"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7074797223595552`*^9, 
  3.7074797293671017`*^9}},ExpressionUUID->"dea8579d-7eca-4f91-b8c3-\
cda1bc7e4afc"],

Cell["\<\
YOU SHOULD USE NONLINEAR LAYERS (TANH) AFTER EVERY LINEAR LAYER to avoid \
creating just ONE BIG LINEAR LAYER:\
\>", "Text",
 CellChangeTimes->{{3.7074805334073915`*^9, 
  3.7074805602311306`*^9}},ExpressionUUID->"c7fe8528-2b48-435b-acf3-\
fc24158557f0"],

Cell[BoxData[
 RowBox[{"Tanh", 
  RowBox[{"(", 
   RowBox[{"Linear", 
    RowBox[{"(", 
     RowBox[{"Tanh", 
      RowBox[{"(", 
       RowBox[{"Linear", 
        RowBox[{"(", 
         RowBox[{"Tanh", 
          RowBox[{"(", "..."}]}]}]}]}]}]}]}]}]}]], "Input",
 CellChangeTimes->{{3.707480562934693*^9, 
  3.7074805689885654`*^9}},ExpressionUUID->"0471bf70-b086-449c-a154-\
95b74e320ce4"],

Cell["\<\
these nestes layers is equivalent to element-wise calls on matrices times \
vectors\
\>", "Text",
 CellChangeTimes->{{3.7074806734138384`*^9, 
  3.707480692229258*^9}},ExpressionUUID->"7f4e57ce-e453-4d94-a61a-\
abbe0bd4d4ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Training", "Section",
 CellChangeTimes->{{3.707479739881584*^9, 
  3.707479741719797*^9}},ExpressionUUID->"7c936208-6439-415a-a5e8-\
57a932bfdf49"],

Cell["Usually trained via gradient descent", "Text",
 CellChangeTimes->{{3.7074797477829046`*^9, 
  3.707479752424943*^9}},ExpressionUUID->"2aedd9aa-8c8f-4d48-be4d-\
ec27cc0625da"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetInitialize", "[", "\[IndentingNewLine]", "\t", 
   RowBox[{"NetChain", "[", "\[IndentingNewLine]", "\t", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"LinearLayer", "[", "5", "]"}], ",", " ", 
      RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}], ",", " ", 
      RowBox[{"LinearLayer", "[", "1", "]"}], ",", " ", 
      RowBox[{"PartLayer", "[", "1", "]"}]}], "}"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7074798127767477`*^9, 
  3.7074798399419603`*^9}},ExpressionUUID->"1f5cf1b0-dd05-452c-9bcf-\
205a15b9cbb1"],

Cell[BoxData[
 TemplateBox[{
  "NetInitialize","nfspec",
   "\"Cannot \\!\\(\\*RowBox[{\\\"\\\\\\\"initialize\\\\\\\"\\\"}]\\) net: \
\\!\\(\\*RowBox[{\\\"\\\\\\\"\\\\\\\\\\\\\\\"Input\\\\\\\\\\\\\\\" port of \
layer 1\\\\\\\"\\\"}]\\) is not fully specified.\"",2,619,350,
   32565558675847453086,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{
  3.707479840373267*^9},ExpressionUUID->"3881bb87-60f3-438d-af7c-\
43f6b0f10d47"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{
  3.707479840373267*^9},ExpressionUUID->"9e7e7969-377f-460f-8d67-\
8795cb08e9b9"]
}, Open  ]],

Cell["Parameters will be initially regularised*", "Text",
 CellChangeTimes->{{3.707480014410318*^9, 
  3.7074800245759687`*^9}},ExpressionUUID->"109e55f4-600d-46b3-80db-\
764d6ebf0d96"],

Cell["\<\
Usual learning approach
- training set   (computes & minimises loss function during training)
- validation set (only compute loss function during training)
- test set (only compute loss function after training)

You NEED the validation set to avoid overfitting; output will be optimised \
r.e. validation 
(hyperparameters can be overfit though)

Overfitting is just \[OpenCurlyDoubleQuote]memorisation\
\[CloseCurlyDoubleQuote]; the network is TOO powerful\
\>", "Text",
 CellChangeTimes->{{3.70748088338302*^9, 3.707480959730229*^9}, {
  3.7074813508513002`*^9, 3.7074814351879516`*^9}, {3.707481478659981*^9, 
  3.707481479292716*^9}},ExpressionUUID->"e9f13ec8-5436-43a1-8446-\
de90285f7632"],

Cell[CellGroupData[{

Cell["Classification Example", "Subsection",
 CellChangeTimes->{{3.7074808184589076`*^9, 
  3.7074808253085113`*^9}},ExpressionUUID->"f112a614-0434-4f93-9bef-\
f0a1d6fd3769"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"resource", " ", "=", " ", 
  RowBox[{"ResourceObject", "[", "\"\<MNIST\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.707480826279046*^9, 
  3.707480833098195*^9}},ExpressionUUID->"d0243e61-ae64-4931-b607-\
3f2e83562abc"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ResourceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{
           {Thickness[0.011111111111111112`], 
            {FaceForm[{RGBColor[0.648987, 0.648987, 0.648987], Opacity[1.]}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.789, 
              7.266}, {86.20700000000001, 7.266}, {86.20700000000001, 
              3.266}, {3.789, 3.266}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{14.129, 
              54.07}, {19.878999999999998`, 54.07}, {19.878999999999998`, 
              15.57}, {14.129, 15.57}}}]}, 
            {FaceForm[{RGBColor[0.274612, 0.618881, 0.810913], Opacity[1.]}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24.129, 
              41.82}, {29.879, 41.82}, {29.879, 15.57}, {24.129, 15.57}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              33.160000000000004`, 54.07}, {38.910000000000004`, 54.07}, {
              38.910000000000004`, 15.57}, {33.160000000000004`, 15.57}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{42.191, 
              31.781}, {47.941, 31.781}, {47.941, 15.569999999999997`}, {
              42.191, 15.569999999999997`}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              51.223000000000006`, 46.875}, {56.973000000000006`, 46.875}, {
              56.973000000000006`, 15.57}, {51.223000000000006`, 15.57}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{60.254, 
              37.707}, {66.00399999999999, 37.707}, {66.00399999999999, 
              15.569999999999997`}, {60.254, 15.569999999999997`}}}]}, 
            {FaceForm[{RGBColor[0.648987, 0.648987, 0.648987], Opacity[1.]}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              70.12899999999999, 54.07}, {75.87899999999999, 54.07}, {
              75.87899999999999, 15.57}, {70.12899999999999, 15.57}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              9.879000000000001, 60.547}, {24.129, 60.547}, {24.129, 
              56.547}, {9.879000000000001, 56.547}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{9.871, 
              13.097999999999999`}, {80.121, 13.097999999999999`}, {80.121, 
              9.097999999999999}, {9.871, 9.097999999999999}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              65.87899999999999, 60.547}, {80.12899999999999, 60.547}, {
              80.12899999999999, 56.547}, {65.87899999999999, 56.547}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
               0, 1, 0}, {0, 1, 0}}}, {{{11.469000000000001`, 
               66.54700000000001}, {45., 82.418}, {78.398, 
               66.54700000000001}}, {{45., 86.73400000000001}, {
               2.2230000000000003`, 66.54700000000001}, {2.2230000000000003`, 
               62.547}, {87.777, 62.547}, {87.777, 66.54700000000001}}}]}}},
          AspectRatio->1,
          Axes->False,
          Background->None,
          Frame->None,
          FrameTicks->None,
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Name: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              TemplateBox[{"\"MNIST\"","\" \"",TagBox[
                 ButtonBox[
                  
                  PaneSelectorBox[{
                   False -> "\"\[RightGuillemet]\"", True -> 
                    StyleBox["\"\[RightGuillemet]\"", {"HyperlinkActive"}]}, 
                   Dynamic[
                    CurrentValue["MouseOver"]], BaseStyle -> {"Hyperlink"}, 
                   FrameMargins -> 0, ImageSize -> Automatic], BaseStyle -> 
                  "Hyperlink", ButtonData -> {
                    URL[
                    "https://datarepository.wolframcloud.com/resources/MNIST"]\
, None}, ButtonNote -> 
                  "https://datarepository.wolframcloud.com/resources/MNIST"], 
                 Annotation[#, 
                  URL[
                  "https://datarepository.wolframcloud.com/resources/MNIST"], 
                  "Hyperlink"]& ]},
               "RowDefault"],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Type: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"DataResource\"\>",
              "SummaryItem"]}]},
           {
            TagBox[
             DynamicModuleBox[{ResourceSystemClient`Private`len$$ = 1}, 
              RowBox[{
               TagBox["\<\"Description: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox[
                ButtonBox[
                 DynamicBox[ToBoxes[
                   Replace[
                    ResourceSystemClient`Private`snipDots[
                    "Database of handwritten digits commonly used for \
training image processing systems", ResourceSystemClient`Private`len$$], 
                    Except[
                    Blank[String]] -> 
                    Snippet[
                    "Database of handwritten digits commonly used for \
training image processing systems", ResourceSystemClient`Private`len$$], {0}],
                    StandardForm],
                  ImageSizeCache->{446., {3., 9.}}],
                 Appearance->None,
                 BaseStyle->{},
                 
                 ButtonFunction:>(ResourceSystemClient`Private`len$$ = 
                  Ceiling[ResourceSystemClient`Private`len$$ 1.5]),
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                "SummaryItem"]}],
              DynamicModuleValues:>{}],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{
           {Thickness[0.011111111111111112`], 
            {FaceForm[{RGBColor[0.648987, 0.648987, 0.648987], Opacity[1.]}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.789, 
              7.266}, {86.20700000000001, 7.266}, {86.20700000000001, 
              3.266}, {3.789, 3.266}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{14.129, 
              54.07}, {19.878999999999998`, 54.07}, {19.878999999999998`, 
              15.57}, {14.129, 15.57}}}]}, 
            {FaceForm[{RGBColor[0.274612, 0.618881, 0.810913], Opacity[1.]}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24.129, 
              41.82}, {29.879, 41.82}, {29.879, 15.57}, {24.129, 15.57}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              33.160000000000004`, 54.07}, {38.910000000000004`, 54.07}, {
              38.910000000000004`, 15.57}, {33.160000000000004`, 15.57}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{42.191, 
              31.781}, {47.941, 31.781}, {47.941, 15.569999999999997`}, {
              42.191, 15.569999999999997`}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              51.223000000000006`, 46.875}, {56.973000000000006`, 46.875}, {
              56.973000000000006`, 15.57}, {51.223000000000006`, 15.57}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{60.254, 
              37.707}, {66.00399999999999, 37.707}, {66.00399999999999, 
              15.569999999999997`}, {60.254, 15.569999999999997`}}}]}, 
            {FaceForm[{RGBColor[0.648987, 0.648987, 0.648987], Opacity[1.]}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              70.12899999999999, 54.07}, {75.87899999999999, 54.07}, {
              75.87899999999999, 15.57}, {70.12899999999999, 15.57}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              9.879000000000001, 60.547}, {24.129, 60.547}, {24.129, 
              56.547}, {9.879000000000001, 56.547}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{9.871, 
              13.097999999999999`}, {80.121, 13.097999999999999`}, {80.121, 
              9.097999999999999}, {9.871, 9.097999999999999}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              65.87899999999999, 60.547}, {80.12899999999999, 60.547}, {
              80.12899999999999, 56.547}, {65.87899999999999, 56.547}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
               0, 1, 0}, {0, 1, 0}}}, {{{11.469000000000001`, 
               66.54700000000001}, {45., 82.418}, {78.398, 
               66.54700000000001}}, {{45., 86.73400000000001}, {
               2.2230000000000003`, 66.54700000000001}, {2.2230000000000003`, 
               62.547}, {87.777, 62.547}, {87.777, 66.54700000000001}}}]}}},
          AspectRatio->1,
          Axes->False,
          Background->None,
          Frame->None,
          FrameTicks->None,
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Name: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              TemplateBox[{"\"MNIST\"","\" \"",TagBox[
                 ButtonBox[
                  
                  PaneSelectorBox[{
                   False -> "\"\[RightGuillemet]\"", True -> 
                    StyleBox["\"\[RightGuillemet]\"", {"HyperlinkActive"}]}, 
                   Dynamic[
                    CurrentValue["MouseOver"]], BaseStyle -> {"Hyperlink"}, 
                   FrameMargins -> 0, ImageSize -> Automatic], BaseStyle -> 
                  "Hyperlink", ButtonData -> {
                    URL[
                    "https://datarepository.wolframcloud.com/resources/MNIST"]\
, None}, ButtonNote -> 
                  "https://datarepository.wolframcloud.com/resources/MNIST"], 
                 Annotation[#, 
                  URL[
                  "https://datarepository.wolframcloud.com/resources/MNIST"], 
                  "Hyperlink"]& ]},
               "RowDefault"],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Type: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"DataResource\"\>",
              "SummaryItem"]}]},
           {
            TagBox[
             DynamicModuleBox[{ResourceSystemClient`Private`len$$ = 1}, 
              RowBox[{
               TagBox["\<\"Description: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox[
                ButtonBox[
                 DynamicBox[ToBoxes[
                   Replace[
                    ResourceSystemClient`Private`snipDots[
                    "Database of handwritten digits commonly used for \
training image processing systems", ResourceSystemClient`Private`len$$], 
                    Except[
                    Blank[String]] -> 
                    Snippet[
                    "Database of handwritten digits commonly used for \
training image processing systems", ResourceSystemClient`Private`len$$], {0}],
                    StandardForm],
                  ImageSizeCache->{446., {3., 9.}}],
                 Appearance->None,
                 BaseStyle->{},
                 
                 ButtonFunction:>(ResourceSystemClient`Private`len$$ = 
                  Ceiling[ResourceSystemClient`Private`len$$ 1.5]),
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                "SummaryItem"]}],
              DynamicModuleValues:>{}],
             "SummaryItem"]},
           {
            RowBox[{
             TagBox["\<\"Categories: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              TagBox[
               TemplateBox[{",","\",\"","\"Machine Learning\""},
                "RowWithSeparators"],
               Short],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"ContentTypes: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              TagBox[
               TemplateBox[{",","\",\"","\"Image\""},
                "RowWithSeparators"],
               Short],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Keywords: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              TagBox[
               
               TemplateBox[{
                ",","\",\"","\"image processing\"","\"machine learning\"",
                 "\"classification\"","\"computer vision\""},
                "RowWithSeparators"],
               Short],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Documentation: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              TagBox[
               ButtonBox[
                
                PaneSelectorBox[{
                 False->"\<\"https://datarepository.wolframcloud.com/\
resources/MNIST\"\>", True->
                 
                 StyleBox["\<\"https://datarepository.wolframcloud.com/\
resources/MNIST\"\>", "HyperlinkActive"]}, Dynamic[
                  CurrentValue["MouseOver"]],
                 BaseStyle->{"Hyperlink"},
                 FrameMargins->0,
                 ImageSize->Automatic],
                BaseStyle->"Hyperlink",
                ButtonData->{
                  URL[
                  "https://datarepository.wolframcloud.com/resources/MNIST"], 
                  None},
                
                ButtonNote->
                 "https://datarepository.wolframcloud.com/resources/MNIST"],
               Annotation[#, 
                URL[
                "https://datarepository.wolframcloud.com/resources/MNIST"], 
                "Hyperlink"]& ],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Data Location: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              
              DynamicModuleBox[{
               ResourceSystemClient`Private`typesetstorage$$ = 
               ResourceSystemClient`Private`typesetstorageLocation, 
               ResourceSystemClient`Private`info$$ = Association[
               "RepositoryLocation" -> 
                URL["https://www.wolframcloud.com/objects/resourcesystem/api/\
1.0"], "MyAccount" -> False, "Name" -> "MNIST", "UUID" -> 
                "16ff8400-2ffb-4642-b626-8e583258924e", 
                "ContentElementLocations" -> 
                Association[
                 "TestData" -> 
                  CloudObject[
                   "https://www.wolframcloud.com/objects/c037bcb1-4d86-4baf-\
a26f-5d45a4312a10"], "TrainingData" -> 
                  CloudObject[
                   "https://www.wolframcloud.com/objects/9d53d3fe-f9a9-45c9-\
bfb5-5c15265ee4ac"]], "ResourceType" -> "DataResource", "ContentSize" -> 
                Quantity[70.08008, "Megabytes"], 
                "ContentElements" -> {
                 "TestData", "TestDataset", "TrainingData", 
                  "TrainingDataset"}, "Version" -> "1.0.0", "Description" -> 
                "Database of handwritten digits commonly used for training \
image processing systems", "ContentTypes" -> {"Image"}, 
                "Categories" -> {"Machine Learning"}, 
                "Keywords" -> {
                 "image processing", "machine learning", "classification", 
                  "computer vision"}, 
                "Attributes" -> {
                 "LocalCopyable", "CloudCopyable", "Multipart"}, 
                "LatestUpdate" -> 
                DateObject[{2016, 6, 2}, "Day", "Gregorian", -5.], 
                "DefaultReturnFormat" -> "wdf", "ContentElementAccessType" -> 
                "List", "ContributorInformation" -> 
                Association[
                 "PublisherID" -> "Wolfram", "DisplayName" -> 
                  "Wolfram Research"], "DefaultContentElement" -> 
                "TrainingData", "Details" -> "", "DOI" -> 
                "https://doi.org/10.24097/wolfram.62081.data", "Format" -> 
                Association["TestData" -> "MX", "TrainingData" -> "MX"], 
                "InformationElements" -> 
                Association[
                 "ContentType" -> "List", "Size" -> 70080080, "Length" -> 
                  60000, "Dimensions" -> {60000}], "Originator" -> 
                "Yann LeCun, Corinna Cortes, and Christopher J.C. Burges", 
                "SeeAlso" -> {}, "ShortName" -> "MNIST", "SourceMetadata" -> 
                Association[
                 "Creator" -> {
                   "Yann LeCun", "Corinna Cortes", "Christopher J.C. Burges"},
                   "Publisher" -> 
                  "Mixed National Institute of Standards and Technology", 
                  "Source" -> Hyperlink["http://yann.lecun.com/exdb/mnist/"]],
                 "ResourceLocations" -> {
                  LocalObject[
                  "file:///C%3A/Users/Tyson%20Jones/AppData/Roaming/Wolfram/\
Objects/Resources/16f/16ff8400-2ffb-4642-b626-8e583258924e"]}, 
                "DownloadedVersion" -> None]}, 
               
               DynamicBox[ToBoxes[
                ResourceSystemClient`Private`info$$ = 
                  ResourceSystemClient`Private`resourceInfo[
                   "16ff8400-2ffb-4642-b626-8e583258924e"]; If[
                   AssociationQ[ResourceSystemClient`Private`info$$], 
                   ResourceSystemClient`Private`typesetstorage$$[
                    Lookup[
                    ResourceSystemClient`Private`info$$, 
                    "ContentElementLocations", None]], 
                   Missing["NotAvailable"]], StandardForm],
                ImageSizeCache->{32., {0., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"UUID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"16ff8400-2ffb-4642-b626-8e583258924e\"\>",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Version: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"1.0.0\"\>",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Size: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              TemplateBox[{"70.08008`","\"MB\"","megabytes","\"Megabytes\""},
               "Quantity"],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Elements: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              TagBox[
               
               TemplateBox[{
                ",","\",\"","\"TestData\"","\"TestDataset\"",
                 "\"TrainingData\"","\"TrainingDataset\""},
                "RowWithSeparators"],
               Short[#, 2]& ],
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  ResourceObject[
   Association[
   "Name" -> "MNIST", "UUID" -> "16ff8400-2ffb-4642-b626-8e583258924e", 
    "ResourceType" -> "DataResource", "Version" -> "1.0.0", "Description" -> 
    "Database of handwritten digits commonly used for training image \
processing systems", "ContentSize" -> Quantity[70.08008, "Megabytes"], 
    "ContentElements" -> {
     "TestData", "TestDataset", "TrainingData", "TrainingDataset"}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7074808372601824`*^9},ExpressionUUID->"a02f9802-94e1-4f7e-b618-\
a7f884f6e242"]
}, Open  ]],

Cell["\<\
Let\[CloseCurlyQuote]s reshuffle the data set from training-test into \
training-validation-test sets\
\>", "Text",
 CellChangeTimes->{{3.7074809736962757`*^9, 3.707480982618267*^9}, {
  3.707481016761891*^9, 
  3.7074810190327573`*^9}},ExpressionUUID->"fe0e52c6-f656-410a-8dc3-\
61860207bc3d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"allData", " ", "=", " ", 
   RowBox[{"RandomSample", " ", "@", " ", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"ResourceData", "[", 
       RowBox[{"resource", ",", " ", "\"\<TrainingData\>\""}], "]"}], ",", 
      " ", 
      RowBox[{"ResourceData", "[", 
       RowBox[{"resource", ",", " ", "\"\<TestData\>\""}], "]"}]}], "]"}]}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trainingSet", " ", "=", " ", 
   RowBox[{"allData", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", "55000"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"validationSet", " ", "=", " ", 
   RowBox[{"allData", "[", 
    RowBox[{"[", 
     RowBox[{"55001", ";;", "65000"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testSet", " ", "=", " ", 
   RowBox[{"allData", "[", 
    RowBox[{"[", 
     RowBox[{"65001", ";;"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.707480983518175*^9, 3.7074810670781507`*^9}, {
  3.707481121779194*^9, 
  3.7074811226797256`*^9}},ExpressionUUID->"addbe64e-91d4-49ce-abcd-\
fcc489178bfb"],

Cell["\<\
leNet is a classic network topology for classifying handwriting\
\>", "Text",
 CellChangeTimes->{{3.7074810815098543`*^9, 
  3.7074811144611225`*^9}},ExpressionUUID->"8496b9f2-b976-450f-8737-\
bc36a7e060af"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"digit", " ", "=", " ", 
  RowBox[{
   RowBox[{"RandomChoice", "[", "trainingSet", "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.707481127643366*^9, 
  3.707481133676749*^9}},ExpressionUUID->"c8593e7a-d744-4469-a734-\
bc4908314166"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/6cxeHc+JydYcxVWuTYpRkZGuT3YpP6uZWRiy3iNTepxLCPjXOyW/XZi
ZBS6hV2ul5FR4hV2qTv8jObfsUv9/y/NuBqX1H8lRoHKGQfefcImdzlBRVqE
kVGs6yE22TeP75SYKTDK7sdh8o/bkYzq93FazMWYgSrwbg9uueNBMEOTGBlL
UOXSbX+A6bvJjIyeH1HlJjHuAFFrZRgZec6jOeAyI7NHUTYrIyOH9zd0x32a
wMEIAqoLsDn9phZQKvwZNqnBAAByrMG+
    "], {{0, 28}, {28, 0}}, {0, 255},
    ColorFunction->GrayLevel],
   BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{28, 28},
  PlotRange->{{0, 28}, {0, 28}}]], "Output",
 CellChangeTimes->{
  3.707481134750081*^9},ExpressionUUID->"b38b5a10-e213-483c-aa04-\
c32219462a62"]
}, Open  ]],

Cell["\<\
we need to make an encoder before feeding tensor into network (which isn\
\[CloseCurlyQuote]t yet made)\
\>", "Text",
 CellChangeTimes->{{3.7074811366502943`*^9, 
  3.7074811540529456`*^9}},ExpressionUUID->"cd741682-b99a-43af-b36d-\
9862e3507e01"],

Cell["\<\
The output tensor is sometimes just an array of probabilities; the decoder \
will just pick the greatest prob (in classification problems)\
\>", "Text",
 CellChangeTimes->{{3.707481172850987*^9, 
  3.7074812202675233`*^9}},ExpressionUUID->"0c2bcef9-2d3b-4116-ba2c-\
e0e3cef3597d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"NetTrain", "[", " ", 
   RowBox[{"...", ",", "   ", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}], "   ", 
  RowBox[{"(*", " ", 
   RowBox[{"use", " ", "Nvidia", " ", "cards", " ", "to", " ", "train"}], " ",
    "*)"}]}]], "Input",
 CellChangeTimes->{{3.7074812611162305`*^9, 
  3.707481277096494*^9}},ExpressionUUID->"942eb00d-ff46-4d58-b3fc-\
4c1b8e7feec5"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{944, 988},
WindowMargins->{{Automatic, -7}, {Automatic, 0}},
FrontEndVersion->"11.1 for Microsoft Windows (64-bit) (March 13, 2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 160, 3, 101, "Title", "ExpressionUUID" -> \
"f7c3c54a-23dd-4488-ab9e-2b65f5e6b191"],
Cell[743, 27, 181, 7, 68, "Text", "ExpressionUUID" -> \
"54735ab1-5ecc-465d-8c49-a1cb7aa6bd92"],
Cell[927, 36, 195, 3, 30, "Text", "ExpressionUUID" -> \
"6fe933b3-65b2-4b94-a06c-1632948d75dc"],
Cell[1125, 41, 177, 3, 30, "Text", "ExpressionUUID" -> \
"1b2107c4-66c6-4016-b146-0f51b855cf6a"],
Cell[CellGroupData[{
Cell[1327, 48, 153, 3, 70, "Section", "ExpressionUUID" -> \
"43467e5f-d9b2-4824-b794-20dbcdbb4f68"],
Cell[1483, 53, 179, 3, 30, "Text", "ExpressionUUID" -> \
"c43d4561-d1ea-4f3f-84b9-9bd4e189a68d"],
Cell[CellGroupData[{
Cell[1687, 60, 235, 5, 30, "Input", "ExpressionUUID" -> \
"117f09cb-3a94-4c39-8f77-59fd1b9b7b90"],
Cell[1925, 67, 5718, 128, 73, "Output", "ExpressionUUID" -> \
"27487f3d-06b0-4201-83a9-00cf6139800b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7680, 200, 545, 13, 50, "Input", "ExpressionUUID" -> \
"6f17b708-e444-4a49-a43a-c23e28d82933"],
Cell[8228, 215, 358, 9, 30, "Output", "ExpressionUUID" -> \
"7436dffb-6a67-449e-aa69-a7fb820796f9"],
Cell[8589, 226, 357, 9, 30, "Output", "ExpressionUUID" -> \
"fa6d5adf-de5f-41bc-8694-15db16e340bb"]
}, Open  ]],
Cell[8961, 238, 176, 3, 30, "Text", "ExpressionUUID" -> \
"cfb22c60-9514-49cf-b298-abdc6f642f9c"],
Cell[9140, 243, 224, 5, 30, "Text", "ExpressionUUID" -> \
"1b479592-f2c5-47ca-87d0-ccc9509dabf7"],
Cell[CellGroupData[{
Cell[9389, 252, 379, 9, 30, "Input", "ExpressionUUID" -> \
"7f853cc0-3db6-4e42-a8cf-caecaa44e531"],
Cell[9771, 263, 9167, 200, 177, "Output", "ExpressionUUID" -> \
"b7f2bc14-c39d-4a9c-8c7e-837db5911887"]
}, Open  ]],
Cell[18953, 466, 327, 7, 30, "Text", "ExpressionUUID" -> \
"43ff60d9-1322-4766-9664-ecfdda567ca4"],
Cell[CellGroupData[{
Cell[19305, 477, 233, 5, 30, "Input", "ExpressionUUID" -> \
"c4935375-2c52-4862-917e-db09ece01bf7"],
Cell[19541, 484, 140, 3, 30, "Output", "ExpressionUUID" -> \
"0a149d0f-fd18-4eaa-a0b9-619a79cdb9e0"]
}, Open  ]],
Cell[19696, 490, 200, 3, 30, "Text", "ExpressionUUID" -> \
"4ac26a08-ba63-4b9e-967d-e4bd76379700"],
Cell[19899, 495, 154, 3, 30, "Input", "ExpressionUUID" -> \
"203cdb73-e0b5-4894-a8de-4bdea216f74f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20090, 503, 154, 3, 70, "Section", "ExpressionUUID" -> \
"982ad641-8ccf-4a32-8767-fbba48b5d4ac"],
Cell[20247, 508, 289, 7, 30, "Text", "ExpressionUUID" -> \
"8dd39be3-3ede-4e2f-b643-05e1d718f6f2"],
Cell[CellGroupData[{
Cell[20561, 519, 670, 16, 107, "Input", "ExpressionUUID" -> \
"4adef2f1-1662-4c0c-a140-b0a1602101cb"],
Cell[21234, 537, 9202, 189, 121, "Output", "ExpressionUUID" -> \
"75d2f7bd-8bea-4566-aba2-d6da72d89612"]
}, Open  ]],
Cell[30451, 729, 266, 7, 30, "Input", "ExpressionUUID" -> \
"d0f6bc4f-1530-42b0-8964-a9581dd7ff9d"],
Cell[30720, 738, 253, 6, 30, "Input", "ExpressionUUID" -> \
"00d4b762-181e-43e7-9f27-774400db09f3"],
Cell[30976, 746, 186, 3, 30, "Text", "ExpressionUUID" -> \
"d34902a1-e284-43e6-8e81-aa37916dedf7"],
Cell[CellGroupData[{
Cell[31187, 753, 944, 23, 88, "Input", "ExpressionUUID" -> \
"05b54ba0-d43f-4a2b-aaed-2281e04f70b0"],
Cell[32134, 778, 6017, 123, 181, "Output", "ExpressionUUID" -> \
"1e55be80-801f-464d-b746-e684e46b2433"]
}, Open  ]],
Cell[38166, 904, 176, 3, 30, "Text", "ExpressionUUID" -> \
"0a58a0c0-b698-4864-9e95-1a88dfa736e9"],
Cell[CellGroupData[{
Cell[38367, 911, 425, 11, 30, "Input", "ExpressionUUID" -> \
"26bc1beb-9f59-4834-8795-aa63f6955277"],
Cell[38795, 924, 21974, 427, 155, "Output", "ExpressionUUID" -> \
"bc9ee998-3733-41a8-93d2-e178a46bb9e2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[60818, 1357, 165, 3, 70, "Section", "ExpressionUUID" -> \
"459b56c6-ce22-47f4-ac13-43715cc92d92"],
Cell[60986, 1362, 214, 5, 30, "Text", "ExpressionUUID" -> \
"4d41bd19-55ae-4755-9022-dc4296e5f160"],
Cell[CellGroupData[{
Cell[61225, 1371, 293, 7, 30, "Input", "ExpressionUUID" -> \
"5c2db8e1-2875-4d1d-8fb0-4947bc82cc46"],
Cell[61521, 1380, 2942, 71, 137, "Output", "ExpressionUUID" -> \
"1e0c724b-d6e1-4d16-b259-9cf21efb4332"]
}, Open  ]],
Cell[CellGroupData[{
Cell[64500, 1456, 180, 3, 30, "Input", "ExpressionUUID" -> \
"6a29d5d5-5122-4dc5-a86e-ae95c05ad6a1"],
Cell[64683, 1461, 139473, 2304, 174, "Output", "ExpressionUUID" -> \
"47ba0a30-a0d4-4797-83d7-ea9886c90859"]
}, Open  ]],
Cell[204171, 3768, 466, 10, 30, "Input", "ExpressionUUID" -> \
"4bb6b572-3bd9-42b8-b7c8-9a1674eb04a3"],
Cell[204640, 3780, 424, 11, 30, "Input", "ExpressionUUID" -> \
"78157b43-a88f-4d26-be5d-8993910f54f5"],
Cell[205067, 3793, 330, 7, 49, "Text", "ExpressionUUID" -> \
"d763adb7-9674-4a1e-819c-e52c89403c68"]
}, Open  ]],
Cell[CellGroupData[{
Cell[205434, 3805, 160, 3, 70, "Section", "ExpressionUUID" -> \
"c98fca54-fc5c-43fd-88da-c9a1ba98b9c8"],
Cell[205597, 3810, 188, 3, 30, "Text", "ExpressionUUID" -> \
"067b0709-4fec-4f37-b3ce-22e061af6984"],
Cell[CellGroupData[{
Cell[205810, 3817, 309, 7, 30, "Input", "ExpressionUUID" -> \
"a4b34d99-2749-4248-93ba-30f203842857"],
Cell[206122, 3826, 11777, 237, 121, "Output", "ExpressionUUID" -> \
"3797f261-e849-4e69-965a-a1165a6c980b"]
}, Open  ]],
Cell[217914, 4066, 177, 3, 30, "Text", "ExpressionUUID" -> \
"10f9b0b5-8152-4e43-8d8b-810b91246602"],
Cell[218094, 4071, 286, 7, 30, "Input", "ExpressionUUID" -> \
"dea8579d-7eca-4f91-b8c3-cda1bc7e4afc"],
Cell[218383, 4080, 264, 6, 30, "Text", "ExpressionUUID" -> \
"c7fe8528-2b48-435b-acf3-fc24158557f0"],
Cell[218650, 4088, 391, 13, 30, "Input", "ExpressionUUID" -> \
"0471bf70-b086-449c-a154-95b74e320ce4"],
Cell[219044, 4103, 235, 6, 30, "Text", "ExpressionUUID" -> \
"7f4e57ce-e453-4d94-a61a-abbe0bd4d4ca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[219316, 4114, 153, 3, 70, "Section", "ExpressionUUID" -> \
"7c936208-6439-415a-a5e8-57a932bfdf49"],
Cell[219472, 4119, 180, 3, 30, "Text", "ExpressionUUID" -> \
"2aedd9aa-8c8f-4d48-be4d-ec27cc0625da"],
Cell[CellGroupData[{
Cell[219677, 4126, 585, 12, 69, "Input", "ExpressionUUID" -> \
"1f5cf1b0-dd05-452c-9bcf-205a15b9cbb1"],
Cell[220265, 4140, 450, 10, 21, "Message", "ExpressionUUID" -> \
"3881bb87-60f3-438d-af7c-43f6b0f10d47"],
Cell[220718, 4152, 136, 3, 30, "Output", "ExpressionUUID" -> \
"9e7e7969-377f-460f-8d67-8795cb08e9b9"]
}, Open  ]],
Cell[220869, 4158, 185, 3, 30, "Text", "ExpressionUUID" -> \
"109e55f4-600d-46b3-80db-764d6ebf0d96"],
Cell[221057, 4163, 705, 16, 182, "Text", "ExpressionUUID" -> \
"e9f13ec8-5436-43a1-8446-de90285f7632"],
Cell[CellGroupData[{
Cell[221787, 4183, 174, 3, 49, "Subsection", "ExpressionUUID" -> \
"f112a614-0434-4f93-9bef-f0a1d6fd3769"],
Cell[CellGroupData[{
Cell[221986, 4190, 245, 5, 30, "Input", "ExpressionUUID" -> \
"d0243e61-ae64-4931-b607-3f2e83562abc"],
Cell[222234, 4197, 22763, 492, 93, "Output", "ExpressionUUID" -> \
"a02f9802-94e1-4f7e-b618-a7f884f6e242"]
}, Open  ]],
Cell[245012, 4692, 304, 7, 30, "Text", "ExpressionUUID" -> \
"fe0e52c6-f656-410a-8dc3-61860207bc3d"],
Cell[245319, 4701, 1123, 32, 88, "Input", "ExpressionUUID" -> \
"addbe64e-91d4-49ce-abcd-fcc489178bfb"],
Cell[246445, 4735, 217, 5, 30, "Text", "ExpressionUUID" -> \
"8496b9f2-b976-450f-8737-bc36a7e060af"],
Cell[CellGroupData[{
Cell[246687, 4744, 291, 7, 30, "Input", "ExpressionUUID" -> \
"c8593e7a-d744-4469-a734-bc4908314166"],
Cell[246981, 4753, 781, 18, 43, "Output", "ExpressionUUID" -> \
"b38b5a10-e213-483c-aa04-c32219462a62"]
}, Open  ]],
Cell[247777, 4774, 257, 6, 30, "Text", "ExpressionUUID" -> \
"cd741682-b99a-43af-b36d-9862e3507e01"],
Cell[248037, 4782, 290, 6, 49, "Text", "ExpressionUUID" -> \
"0c2bcef9-2d3b-4116-ba2c-e0e3cef3597d"],
Cell[248330, 4790, 413, 10, 30, "Input", "ExpressionUUID" -> \
"942eb00d-ff46-4d58-b3fc-4c1b8e7feec5"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

